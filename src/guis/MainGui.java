/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import Database.Database;
import Database.db_Cloudlet;
import Database.db_Datacenter;
import Database.db_Host;
import Database.db_HostType;
import Database.db_SAN;
import Database.db_User;
import Database.db_Vm;
import Database.db_VmType;
import Database.rsTable;
import Database.db_Cloudlet;
import Support.KeyEvent;
import Support.MetricHistory;
import myextend.Simulation;
import java.awt.Cursor;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JErrorProvider;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import myextend.MyBroker;

/**
 *
 * @author GC
 */
public class MainGui extends javax.swing.JFrame {

    /**
     * Creates new form MainGui
     */

    private String scenarioName;
    public static Statement stm;
    public static Connection con;
    public int mainSeed;
    JErrorProvider error = new JErrorProvider();
    
    public MainGui(String scenarioName) throws SQLException {
        this.scenarioName = scenarioName;
        con = Database.Open(scenarioName);
        stm = con.createStatement();
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            initComponents();
            this.setLocationRelativeTo(null);
            cb_ScenarioList.setSelectedItem(scenarioName);            
            panel_AddSAN.setVisible(true);
            panel_EditSAN.setVisible(false);
            updateDCTable();
            jTable_Datacenter.setRowSelectionInterval(0, 0);
            updateUserTable();
            jTable_User.setRowSelectionInterval(0, 0);
            updateCost(stm, (int)jTable_Datacenter.getValueAt(0, 0));
            updateSANTable((int)jTable_Datacenter.getValueAt(0, 0));
            updateHostTable((int)jTable_Datacenter.getValueAt(0, 0));
            updateVmTable((int)jTable_User.getValueAt(0, 0));
            updateSetting(stm);
            jTable_Host.setRowSelectionInterval(0, 0);
            updateHostType();
            jTable_Vm.setRowSelectionInterval(0, 0);
            updateVmType();
            updateCloudlet(stm, (int)jTable_User.getValueAt(0, 0));
            
            Random rand = new Random();
            mainSeed = rand.nextInt();
//            jScroll_Cloudlet.setVisible(false);
//            bt_Cloudlet_Add.setVisible(false);
//            bt_Cloudlet_Del.setVisible(false);
//            bt_Cloudlet_Edit.setVisible(false);
//            radio_Auto.setVisible(false);
//            radio_Detail.setVisible(false);
//            panel_CloudletAuto.setVisible(true);
//            updateCloudletTable((int)jTable_User.getValueAt(0, 0));
//            bt_Overview.setVisible(false);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btg_CloudletOption = new javax.swing.ButtonGroup();
        label_DatacenterCapacity = new javax.swing.JLabel();
        label_Dc_RamCapacity = new javax.swing.JLabel();
        label_Dc_StorageCapacity = new javax.swing.JLabel();
        label_Dc_BwCapacity = new javax.swing.JLabel();
        tf_Dc_StorageCapacity = new javax.swing.JTextField();
        tf_Dc_BwCapacity = new javax.swing.JTextField();
        tf_Dc_RamCapacity = new javax.swing.JTextField();
        label_NumberDatacenter = new javax.swing.JLabel();
        tf_NumberDatacenter = new javax.swing.JTextField();
        label_TotalCapacity = new javax.swing.JLabel();
        label_TotalRamCapacity = new javax.swing.JLabel();
        tf_TotalRamCapacity = new javax.swing.JTextField();
        label_TotalStorageCapacity = new javax.swing.JLabel();
        tf_TotalStorageCapacity = new javax.swing.JTextField();
        label_TotalBwCapacity = new javax.swing.JLabel();
        tf_TotalBwCapacity = new javax.swing.JTextField();
        btg_KeepSeedOption = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btg_Compare = new javax.swing.ButtonGroup();
        bt_Cloudlet_Add = new javax.swing.JButton();
        bt_Cloudlet_Del = new javax.swing.JButton();
        bt_Cloudlet_Edit = new javax.swing.JButton();
        radio_Detail = new javax.swing.JRadioButton();
        radio_Auto = new javax.swing.JRadioButton();
        jScroll_Cloudlet = new javax.swing.JScrollPane();
        jTable_Cloudlet = new javax.swing.JTable();
        panel_CloudletOption = new javax.swing.JPanel();
        bt_Overview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panel_Main = new javax.swing.JPanel();
        panel_Main2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        panel_TabDatacenter = new javax.swing.JPanel();
        panel_Datacenter = new javax.swing.JPanel();
        bt_Dc_Add = new javax.swing.JButton();
        bt_Dc_Del = new javax.swing.JButton();
        bt_Dc_Edit = new javax.swing.JButton();
        jScroll_Datacenter = new javax.swing.JScrollPane();
        jTable_Datacenter = new javax.swing.JTable();
        panel_Cost = new javax.swing.JPanel();
        label_NumberPes2 = new javax.swing.JLabel();
        label_MipsPerPes2 = new javax.swing.JLabel();
        label_TypeName2 = new javax.swing.JLabel();
        label_Ram2 = new javax.swing.JLabel();
        tf_CostPerSecond = new javax.swing.JTextField();
        tf_CostPerRam = new javax.swing.JTextField();
        tf_CostPerStorage = new javax.swing.JTextField();
        tf_CostPerBw = new javax.swing.JTextField();
        label_NumberDC0 = new javax.swing.JLabel();
        label_NumberDC = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel_Host1 = new javax.swing.JPanel();
        panel_Host = new javax.swing.JPanel();
        bt_Host_Edit = new javax.swing.JButton();
        bt_Host_Del = new javax.swing.JButton();
        bt_Host_Add = new javax.swing.JButton();
        jScroll_Host = new javax.swing.JScrollPane();
        jTable_Host = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        panel_HostType = new javax.swing.JPanel();
        label_NumberPes = new javax.swing.JLabel();
        label_MipsPerPes = new javax.swing.JLabel();
        label_TypeName = new javax.swing.JLabel();
        label_Ram = new javax.swing.JLabel();
        label_Storage = new javax.swing.JLabel();
        tf_Host_TypeName = new javax.swing.JTextField();
        tf_Host_NumberPes = new javax.swing.JTextField();
        tf_Host_MipsPerPes = new javax.swing.JTextField();
        tf_Host_Ram = new javax.swing.JTextField();
        tf_Host_Storage = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_PowerModel = new javax.swing.JTextArea();
        label_NumberHost0 = new javax.swing.JLabel();
        label_NumberHost = new javax.swing.JLabel();
        panel_SAN1 = new javax.swing.JPanel();
        panel_SAN = new javax.swing.JPanel();
        jScroll_SAN = new javax.swing.JScrollPane();
        jTable_SAN = new javax.swing.JTable();
        bt_SAN_Del = new javax.swing.JButton();
        bt_SAN_Edit = new javax.swing.JButton();
        panel_TempSAN = new javax.swing.JPanel();
        panel_AddSAN = new javax.swing.JPanel();
        bt_SAN_Add = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        tf_NameSAN = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tf_CapacitySAN = new javax.swing.JTextField();
        tf_BwSAN = new javax.swing.JTextField();
        tf_LatencySAN = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        panel_EditSAN = new javax.swing.JPanel();
        bt_SAN_Ok = new javax.swing.JButton();
        label_Edit_NameSAN = new javax.swing.JLabel();
        tf_Edit_NameSAN = new javax.swing.JTextField();
        label_Edit_CapacitySAN = new javax.swing.JLabel();
        label_Edit_BwSAN = new javax.swing.JLabel();
        tf_Edit_CapacitySAN = new javax.swing.JTextField();
        tf_Edit_BwSAN = new javax.swing.JTextField();
        tf_Edit_LatencySAN = new javax.swing.JTextField();
        label_Edit_LatencySAN = new javax.swing.JLabel();
        bt_SAN_Cancel = new javax.swing.JButton();
        label_NumberSAN0 = new javax.swing.JLabel();
        label_NumberSAN = new javax.swing.JLabel();
        panel_TabUser = new javax.swing.JPanel();
        panel_User = new javax.swing.JPanel();
        jScroll_User = new javax.swing.JScrollPane();
        jTable_User = new javax.swing.JTable();
        bt_User_Add = new javax.swing.JButton();
        bt_User_Del = new javax.swing.JButton();
        label_NumberUser0 = new javax.swing.JLabel();
        label_NumberUser = new javax.swing.JLabel();
        panel_Vm = new javax.swing.JPanel();
        jScroll_Vm = new javax.swing.JScrollPane();
        jTable_Vm = new javax.swing.JTable();
        bt_Vm_Add = new javax.swing.JButton();
        bt_Vm_Del = new javax.swing.JButton();
        bt_Vm_Edit = new javax.swing.JButton();
        panel_HostType1 = new javax.swing.JPanel();
        label_NumberPes1 = new javax.swing.JLabel();
        label_MipsPerPes1 = new javax.swing.JLabel();
        label_TypeName1 = new javax.swing.JLabel();
        label_Ram1 = new javax.swing.JLabel();
        label_Storage1 = new javax.swing.JLabel();
        tf_Vm_TypeName = new javax.swing.JTextField();
        tf_Vm_NumberPes = new javax.swing.JTextField();
        tf_Vm_MipsPerPes = new javax.swing.JTextField();
        tf_Vm_Ram = new javax.swing.JTextField();
        tf_Vm_Storage = new javax.swing.JTextField();
        label_Storage2 = new javax.swing.JLabel();
        tf_Vm_Bw = new javax.swing.JTextField();
        label_NumberVm0 = new javax.swing.JLabel();
        label_NumberVm = new javax.swing.JLabel();
        panel_Cloudlet = new javax.swing.JPanel();
        panel_CloudletAuto = new javax.swing.JPanel();
        tf_MinSize = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tf_MaxSize = new javax.swing.JTextField();
        tf_MinInputSize = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tf_MaxInputSize = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tf_MinOutputSize = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        tf_MaxOutputSize = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tf_minNumPes = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        tf_MaxNumPes = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        cb_BwUtilModel = new javax.swing.JComboBox();
        cb_RamUtilModel = new javax.swing.JComboBox();
        cb_CpuUtilModel = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        radio_EnableSeed = new javax.swing.JRadioButton();
        radio_DisableSeed = new javax.swing.JRadioButton();
        bt_EditCloudlet = new javax.swing.JButton();
        label_ScenarioCurrent = new javax.swing.JLabel();
        bt_ChangeScenario = new javax.swing.JButton();
        bt_Run = new javax.swing.JButton();
        cb_ScenarioList = new javax.swing.JComboBox();
        label_LogEnable = new javax.swing.JLabel();
        chb_LogEnable = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        label_DatacenterCapacity.setText("Tổng khả năng của Datacenter:");

        label_Dc_RamCapacity.setText("Ram (MB):");

        label_Dc_StorageCapacity.setText("Storage (MB):");

        label_Dc_BwCapacity.setText("Bandwidth (Mbps):");

        tf_Dc_StorageCapacity.setEditable(false);
        tf_Dc_StorageCapacity.setText("0");
        tf_Dc_StorageCapacity.setBorder(null);

        tf_Dc_BwCapacity.setEditable(false);
        tf_Dc_BwCapacity.setText("0");
        tf_Dc_BwCapacity.setBorder(null);

        tf_Dc_RamCapacity.setEditable(false);
        tf_Dc_RamCapacity.setText("0");
        tf_Dc_RamCapacity.setBorder(null);

        label_NumberDatacenter.setText("Tổng số Datacenter:");

        tf_NumberDatacenter.setEditable(false);
        tf_NumberDatacenter.setBorder(null);

        label_TotalCapacity.setText("Tổng khả năng của toàn hệ thống:");

        label_TotalRamCapacity.setText("Ram (MB):");

        tf_TotalRamCapacity.setEditable(false);
        tf_TotalRamCapacity.setBorder(null);

        label_TotalStorageCapacity.setText("Storage (MB):");

        tf_TotalStorageCapacity.setEditable(false);
        tf_TotalStorageCapacity.setBorder(null);

        label_TotalBwCapacity.setText("Bandwidth (Mbps):");

        tf_TotalBwCapacity.setEditable(false);
        tf_TotalBwCapacity.setBorder(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        bt_Cloudlet_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_Cloudlet_Add.setText("Thêm");
        bt_Cloudlet_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Cloudlet_AddActionPerformed(evt);
            }
        });

        bt_Cloudlet_Del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_Cloudlet_Del.setText("Xóa");
        bt_Cloudlet_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Cloudlet_DelActionPerformed(evt);
            }
        });

        bt_Cloudlet_Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudeditsmall.png"))); // NOI18N
        bt_Cloudlet_Edit.setText("Sửa");
        bt_Cloudlet_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Cloudlet_EditActionPerformed(evt);
            }
        });

        radio_Detail.setBackground(new java.awt.Color(255, 255, 255));
        btg_CloudletOption.add(radio_Detail);
        radio_Detail.setText("Chi tiết");
        radio_Detail.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_DetailItemStateChanged(evt);
            }
        });

        radio_Auto.setBackground(new java.awt.Color(255, 255, 255));
        btg_CloudletOption.add(radio_Auto);
        radio_Auto.setSelected(true);
        radio_Auto.setText("Tự động");
        radio_Auto.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio_AutoItemStateChanged(evt);
            }
        });

        jTable_Cloudlet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cloudlet ID", "Size of Cloudlet", "Input File size", "Output File size", "Number of Pes", "Utilization Model Cpu", "Utilizaton Model Ram", "Utilization Model Bw"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScroll_Cloudlet.setViewportView(jTable_Cloudlet);

        javax.swing.GroupLayout panel_CloudletOptionLayout = new javax.swing.GroupLayout(panel_CloudletOption);
        panel_CloudletOption.setLayout(panel_CloudletOptionLayout);
        panel_CloudletOptionLayout.setHorizontalGroup(
            panel_CloudletOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1016, Short.MAX_VALUE)
        );
        panel_CloudletOptionLayout.setVerticalGroup(
            panel_CloudletOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        bt_Overview.setBackground(new java.awt.Color(51, 153, 255));
        bt_Overview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/overviewsmall.png"))); // NOI18N
        bt_Overview.setText("Tổng quát hệ thống");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panel_MainLayout = new javax.swing.GroupLayout(panel_Main);
        panel_Main.setLayout(panel_MainLayout);
        panel_MainLayout.setHorizontalGroup(
            panel_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1467, Short.MAX_VALUE)
        );
        panel_MainLayout.setVerticalGroup(
            panel_MainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 612, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panel_Main);

        panel_Main2.setBackground(new java.awt.Color(51, 153, 255));

        jTabbedPane2.setBackground(new java.awt.Color(51, 153, 255));
        jTabbedPane2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        panel_TabDatacenter.setBackground(new java.awt.Color(153, 204, 255));

        panel_Datacenter.setBackground(new java.awt.Color(255, 255, 255));
        panel_Datacenter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Đặc tính Datacenter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        bt_Dc_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_Dc_Add.setText("Thêm");
        bt_Dc_Add.setToolTipText("");
        bt_Dc_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Dc_AddActionPerformed(evt);
            }
        });

        bt_Dc_Del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_Dc_Del.setText("Xóa");
        bt_Dc_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Dc_DelActionPerformed(evt);
            }
        });

        bt_Dc_Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudeditsmall.png"))); // NOI18N
        bt_Dc_Edit.setText("Sửa");
        bt_Dc_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Dc_EditActionPerformed(evt);
            }
        });

        jScroll_Datacenter.setBackground(new java.awt.Color(255, 255, 255));
        jScroll_Datacenter.setToolTipText("");

        jTable_Datacenter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Operating System", "Architecture", "VM Monitor", "Time zone", "VM Migration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Datacenter.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_Datacenter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_DatacenterMouseClicked(evt);
            }
        });
        jScroll_Datacenter.setViewportView(jTable_Datacenter);

        panel_Cost.setBackground(new java.awt.Color(227, 227, 227));
        panel_Cost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi phí sử dụng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        panel_Cost.setPreferredSize(new java.awt.Dimension(820, 200));

        label_NumberPes2.setText("Cost per Ram($):");

        label_MipsPerPes2.setText("Cost per Storage($):");

        label_TypeName2.setText("Cost per Second($):");

        label_Ram2.setText("Cost per Bandwidth($):");

        tf_CostPerSecond.setEditable(false);

        tf_CostPerRam.setEditable(false);

        tf_CostPerStorage.setEditable(false);

        tf_CostPerBw.setEditable(false);

        javax.swing.GroupLayout panel_CostLayout = new javax.swing.GroupLayout(panel_Cost);
        panel_Cost.setLayout(panel_CostLayout);
        panel_CostLayout.setHorizontalGroup(
            panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CostLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_CostLayout.createSequentialGroup()
                        .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_MipsPerPes2)
                            .addComponent(label_Ram2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_CostPerBw, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(tf_CostPerStorage)))
                    .addGroup(panel_CostLayout.createSequentialGroup()
                        .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_NumberPes2)
                            .addComponent(label_TypeName2))
                        .addGap(19, 19, 19)
                        .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_CostPerRam)
                            .addComponent(tf_CostPerSecond))))
                .addContainerGap())
        );
        panel_CostLayout.setVerticalGroup(
            panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CostLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_TypeName2)
                    .addComponent(tf_CostPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_NumberPes2)
                    .addComponent(tf_CostPerRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_MipsPerPes2)
                    .addComponent(tf_CostPerStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Ram2)
                    .addComponent(tf_CostPerBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label_NumberDC0.setText("Tống số Datacenter:");

        label_NumberDC.setText("0");

        javax.swing.GroupLayout panel_DatacenterLayout = new javax.swing.GroupLayout(panel_Datacenter);
        panel_Datacenter.setLayout(panel_DatacenterLayout);
        panel_DatacenterLayout.setHorizontalGroup(
            panel_DatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DatacenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_DatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_DatacenterLayout.createSequentialGroup()
                        .addComponent(label_NumberDC0)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_NumberDC, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_Dc_Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Dc_Del)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Dc_Edit)
                        .addGap(479, 479, 479))
                    .addGroup(panel_DatacenterLayout.createSequentialGroup()
                        .addComponent(jScroll_Datacenter, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel_Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panel_DatacenterLayout.setVerticalGroup(
            panel_DatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DatacenterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_DatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_Dc_Add)
                    .addComponent(bt_Dc_Del)
                    .addComponent(bt_Dc_Edit)
                    .addComponent(label_NumberDC0)
                    .addComponent(label_NumberDC))
                .addGap(5, 5, 5)
                .addGroup(panel_DatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScroll_Datacenter, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addGroup(panel_DatacenterLayout.createSequentialGroup()
                        .addComponent(panel_Cost, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.setBackground(new java.awt.Color(153, 204, 255));
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        panel_Host1.setBackground(new java.awt.Color(153, 204, 255));

        panel_Host.setBackground(new java.awt.Color(255, 255, 255));
        panel_Host.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin Host", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        panel_Host.setPreferredSize(new java.awt.Dimension(820, 200));

        bt_Host_Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudeditsmall.png"))); // NOI18N
        bt_Host_Edit.setText("Sửa");
        bt_Host_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Host_EditActionPerformed(evt);
            }
        });

        bt_Host_Del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_Host_Del.setText("Xóa");
        bt_Host_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Host_DelActionPerformed(evt);
            }
        });

        bt_Host_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_Host_Add.setText("Thêm");
        bt_Host_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Host_AddActionPerformed(evt);
            }
        });

        jScroll_Host.setBackground(new java.awt.Color(255, 255, 255));

        jTable_Host.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Host ID", "Host Type", "Bandwidth", "VM Scheduler Policy"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Host.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_Host.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_HostMouseClicked(evt);
            }
        });
        jScroll_Host.setViewportView(jTable_Host);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Host Type Specification", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        panel_HostType.setBackground(new java.awt.Color(227, 227, 227));
        panel_HostType.setPreferredSize(new java.awt.Dimension(820, 200));

        label_NumberPes.setText("Number of Pes:");

        label_MipsPerPes.setText("Mips of Pes:");

        label_TypeName.setText("Type Name:");

        label_Ram.setText("Ram(MB):");

        label_Storage.setText("Storage(MB):");

        tf_Host_TypeName.setEditable(false);

        tf_Host_NumberPes.setEditable(false);

        tf_Host_MipsPerPes.setEditable(false);

        tf_Host_Ram.setEditable(false);

        tf_Host_Storage.setEditable(false);

        javax.swing.GroupLayout panel_HostTypeLayout = new javax.swing.GroupLayout(panel_HostType);
        panel_HostType.setLayout(panel_HostTypeLayout);
        panel_HostTypeLayout.setHorizontalGroup(
            panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_HostTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_HostTypeLayout.createSequentialGroup()
                        .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_MipsPerPes)
                            .addComponent(label_Ram)
                            .addComponent(label_Storage))
                        .addGap(14, 14, 14)
                        .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Host_Ram)
                            .addComponent(tf_Host_MipsPerPes)
                            .addComponent(tf_Host_Storage)))
                    .addGroup(panel_HostTypeLayout.createSequentialGroup()
                        .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_NumberPes)
                            .addComponent(label_TypeName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Host_TypeName, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                            .addComponent(tf_Host_NumberPes))))
                .addContainerGap())
        );
        panel_HostTypeLayout.setVerticalGroup(
            panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_HostTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_TypeName)
                    .addComponent(tf_Host_TypeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_NumberPes)
                    .addComponent(tf_Host_NumberPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_MipsPerPes)
                    .addComponent(tf_Host_MipsPerPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Ram)
                    .addComponent(tf_Host_Ram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Storage)
                    .addComponent(tf_Host_Storage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Cấu hình", panel_HostType);

        jPanel3.setBackground(new java.awt.Color(227, 227, 227));

        ta_PowerModel.setEditable(false);
        ta_PowerModel.setColumns(20);
        ta_PowerModel.setRows(5);
        jScrollPane2.setViewportView(ta_PowerModel);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("Điện năng", jPanel3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        label_NumberHost0.setText("Số Host đang chọn:");

        label_NumberHost.setText("0");

        javax.swing.GroupLayout panel_HostLayout = new javax.swing.GroupLayout(panel_Host);
        panel_Host.setLayout(panel_HostLayout);
        panel_HostLayout.setHorizontalGroup(
            panel_HostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_HostLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_HostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_HostLayout.createSequentialGroup()
                        .addComponent(label_NumberHost0)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_NumberHost, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_Host_Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Host_Del)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Host_Edit))
                    .addGroup(panel_HostLayout.createSequentialGroup()
                        .addComponent(jScroll_Host, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_HostLayout.setVerticalGroup(
            panel_HostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_HostLayout.createSequentialGroup()
                .addGroup(panel_HostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_HostLayout.createSequentialGroup()
                        .addGroup(panel_HostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_Host_Del)
                            .addComponent(bt_Host_Edit)
                            .addComponent(bt_Host_Add)
                            .addComponent(label_NumberHost0)
                            .addComponent(label_NumberHost))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScroll_Host, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_HostLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_Host1Layout = new javax.swing.GroupLayout(panel_Host1);
        panel_Host1.setLayout(panel_Host1Layout);
        panel_Host1Layout.setHorizontalGroup(
            panel_Host1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_Host, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1205, Short.MAX_VALUE)
        );
        panel_Host1Layout.setVerticalGroup(
            panel_Host1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_Host, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tùy chỉnh Host", panel_Host1);

        panel_SAN1.setBackground(new java.awt.Color(153, 204, 255));

        panel_SAN.setBackground(new java.awt.Color(255, 255, 255));
        panel_SAN.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Storage Area Network", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        panel_SAN.setLayout(null);

        jScroll_SAN.setBackground(new java.awt.Color(255, 255, 255));

        jTable_SAN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Capacity", "Bandwidth", "Network Latency"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScroll_SAN.setViewportView(jTable_SAN);

        panel_SAN.add(jScroll_SAN);
        jScroll_SAN.setBounds(16, 52, 602, 162);

        bt_SAN_Del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_SAN_Del.setText("Xóa");
        bt_SAN_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_SAN_DelActionPerformed(evt);
            }
        });
        panel_SAN.add(bt_SAN_Del);
        bt_SAN_Del.setBounds(531, 17, 87, 29);

        bt_SAN_Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudeditsmall.png"))); // NOI18N
        bt_SAN_Edit.setText("Sửa");
        bt_SAN_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_SAN_EditActionPerformed(evt);
            }
        });
        panel_SAN.add(bt_SAN_Edit);
        bt_SAN_Edit.setBounds(438, 17, 87, 29);

        panel_TempSAN.setPreferredSize(new java.awt.Dimension(240, 179));
        panel_TempSAN.setLayout(null);

        panel_AddSAN.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thêm SAN", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        bt_SAN_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_SAN_Add.setText("Thêm SAN");
        bt_SAN_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_SAN_AddActionPerformed(evt);
            }
        });

        jLabel13.setText("Name:");

        tf_NameSAN.setText("SAN");

        jLabel14.setText("Capacity (MB):");

        jLabel15.setText("Bandwidth (Kbps):");

        tf_CapacitySAN.setText("0");

        tf_BwSAN.setText("0");

        tf_LatencySAN.setText("0");

        jLabel16.setText("Latency (s):");

        javax.swing.GroupLayout panel_AddSANLayout = new javax.swing.GroupLayout(panel_AddSAN);
        panel_AddSAN.setLayout(panel_AddSANLayout);
        panel_AddSANLayout.setHorizontalGroup(
            panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AddSANLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tf_BwSAN, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_CapacitySAN, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tf_NameSAN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(tf_LatencySAN))
                .addGap(46, 46, 46))
            .addGroup(panel_AddSANLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(bt_SAN_Add)
                .addContainerGap(71, Short.MAX_VALUE))
        );
        panel_AddSANLayout.setVerticalGroup(
            panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AddSANLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tf_NameSAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_CapacitySAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_BwSAN, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_AddSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tf_LatencySAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_SAN_Add)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_TempSAN.add(panel_AddSAN);
        panel_AddSAN.setBounds(0, 0, 270, 179);

        panel_EditSAN.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sửa SAN", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        panel_EditSAN.setMinimumSize(new java.awt.Dimension(240, 179));
        panel_EditSAN.setPreferredSize(new java.awt.Dimension(240, 179));

        bt_SAN_Ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/oksmall.png"))); // NOI18N
        bt_SAN_Ok.setText("Sửa");
        bt_SAN_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_SAN_OkActionPerformed(evt);
            }
        });

        label_Edit_NameSAN.setText("Name:");

        tf_Edit_NameSAN.setText("SAN");

        label_Edit_CapacitySAN.setText("Capacity (MB):");

        label_Edit_BwSAN.setText("Bandwidth (Kbps):");

        tf_Edit_CapacitySAN.setText("0");

        tf_Edit_BwSAN.setText("0");

        tf_Edit_LatencySAN.setText("0");

        label_Edit_LatencySAN.setText("Latency (s):");

        bt_SAN_Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cancelsmall.png"))); // NOI18N
        bt_SAN_Cancel.setText("Hủy");
        bt_SAN_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_SAN_CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_EditSANLayout = new javax.swing.GroupLayout(panel_EditSAN);
        panel_EditSAN.setLayout(panel_EditSANLayout);
        panel_EditSANLayout.setHorizontalGroup(
            panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_EditSANLayout.createSequentialGroup()
                .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_EditSANLayout.createSequentialGroup()
                        .addGap(0, 38, Short.MAX_VALUE)
                        .addComponent(bt_SAN_Ok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_SAN_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_EditSANLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_Edit_NameSAN)
                            .addComponent(label_Edit_CapacitySAN)
                            .addComponent(label_Edit_LatencySAN)
                            .addComponent(label_Edit_BwSAN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tf_Edit_BwSAN, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Edit_CapacitySAN, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Edit_NameSAN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(tf_Edit_LatencySAN))))
                .addGap(46, 46, 46))
        );
        panel_EditSANLayout.setVerticalGroup(
            panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_EditSANLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Edit_NameSAN)
                    .addComponent(tf_Edit_NameSAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_Edit_CapacitySAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_Edit_CapacitySAN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_Edit_BwSAN, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_Edit_BwSAN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Edit_LatencySAN)
                    .addComponent(tf_Edit_LatencySAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_EditSANLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_SAN_Ok)
                    .addComponent(bt_SAN_Cancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_TempSAN.add(panel_EditSAN);
        panel_EditSAN.setBounds(0, 0, 270, 179);

        panel_SAN.add(panel_TempSAN);
        panel_TempSAN.setBounds(628, 35, 270, 179);

        label_NumberSAN0.setText("Tổng số SAN của Datacenter:");
        panel_SAN.add(label_NumberSAN0);
        label_NumberSAN0.setBounds(20, 30, 150, 14);

        label_NumberSAN.setText("0");
        panel_SAN.add(label_NumberSAN);
        label_NumberSAN.setBounds(170, 30, 100, 14);

        javax.swing.GroupLayout panel_SAN1Layout = new javax.swing.GroupLayout(panel_SAN1);
        panel_SAN1.setLayout(panel_SAN1Layout);
        panel_SAN1Layout.setHorizontalGroup(
            panel_SAN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_SAN, javax.swing.GroupLayout.DEFAULT_SIZE, 1205, Short.MAX_VALUE)
        );
        panel_SAN1Layout.setVerticalGroup(
            panel_SAN1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_SAN, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Tùy chỉnh SAN", panel_SAN1);

        javax.swing.GroupLayout panel_TabDatacenterLayout = new javax.swing.GroupLayout(panel_TabDatacenter);
        panel_TabDatacenter.setLayout(panel_TabDatacenterLayout);
        panel_TabDatacenterLayout.setHorizontalGroup(
            panel_TabDatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TabDatacenterLayout.createSequentialGroup()
                .addGroup(panel_TabDatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_Datacenter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        panel_TabDatacenterLayout.setVerticalGroup(
            panel_TabDatacenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TabDatacenterLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(panel_Datacenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addGap(1490, 1490, 1490))
        );

        jTabbedPane2.addTab("Tùy chỉnh Datacenter", panel_TabDatacenter);

        panel_TabUser.setBackground(new java.awt.Color(153, 204, 255));

        panel_User.setBackground(new java.awt.Color(255, 255, 255));
        panel_User.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User/Broker", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jTable_User.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Broker(User) ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_User.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_User.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_UserMouseClicked(evt);
            }
        });
        jScroll_User.setViewportView(jTable_User);

        bt_User_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_User_Add.setText("Thêm");
        bt_User_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_User_AddActionPerformed(evt);
            }
        });

        bt_User_Del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_User_Del.setText(" Xóa");
        bt_User_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_User_DelActionPerformed(evt);
            }
        });

        label_NumberUser0.setText("Tổng số User/Broker");

        label_NumberUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_NumberUser.setText("0");

        javax.swing.GroupLayout panel_UserLayout = new javax.swing.GroupLayout(panel_User);
        panel_User.setLayout(panel_UserLayout);
        panel_UserLayout.setHorizontalGroup(
            panel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScroll_User, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(bt_User_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bt_User_Del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panel_UserLayout.createSequentialGroup()
                .addComponent(label_NumberUser0)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panel_UserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_NumberUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel_UserLayout.setVerticalGroup(
            panel_UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_UserLayout.createSequentialGroup()
                .addComponent(bt_User_Add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_User_Del)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScroll_User, javax.swing.GroupLayout.DEFAULT_SIZE, 1836, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_NumberUser0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_NumberUser))
        );

        panel_Vm.setBackground(new java.awt.Color(255, 255, 255));
        panel_Vm.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tùy chỉnh VM (Virtual Machine)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jTable_Vm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vm ID", "Vm Type", "VM Monitor", "Cloudlet Scheduler Policy"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Vm.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_Vm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_VmMouseClicked(evt);
            }
        });
        jScroll_Vm.setViewportView(jTable_Vm);

        bt_Vm_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_Vm_Add.setText("Thêm");
        bt_Vm_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Vm_AddActionPerformed(evt);
            }
        });

        bt_Vm_Del.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_Vm_Del.setText("Xóa");
        bt_Vm_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Vm_DelActionPerformed(evt);
            }
        });

        bt_Vm_Edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudeditsmall.png"))); // NOI18N
        bt_Vm_Edit.setText("Sửa");
        bt_Vm_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Vm_EditActionPerformed(evt);
            }
        });

        panel_HostType1.setBackground(new java.awt.Color(227, 227, 227));
        panel_HostType1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vm Type Specification", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        panel_HostType1.setPreferredSize(new java.awt.Dimension(820, 200));

        label_NumberPes1.setText("Number of Pes(Mips):");

        label_MipsPerPes1.setText("Mips of Pes(MI):");

        label_TypeName1.setText("Type Name:");

        label_Ram1.setText("Ram(MB):");

        label_Storage1.setText("Storage(MB):");

        tf_Vm_TypeName.setEditable(false);

        tf_Vm_NumberPes.setEditable(false);

        tf_Vm_MipsPerPes.setEditable(false);

        tf_Vm_Ram.setEditable(false);

        tf_Vm_Storage.setEditable(false);

        label_Storage2.setText("Bandwidth(Kbps):");

        tf_Vm_Bw.setEditable(false);

        javax.swing.GroupLayout panel_HostType1Layout = new javax.swing.GroupLayout(panel_HostType1);
        panel_HostType1.setLayout(panel_HostType1Layout);
        panel_HostType1Layout.setHorizontalGroup(
            panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_HostType1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_HostType1Layout.createSequentialGroup()
                        .addComponent(label_NumberPes1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_Vm_NumberPes, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                    .addGroup(panel_HostType1Layout.createSequentialGroup()
                        .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_MipsPerPes1)
                            .addComponent(label_Ram1)
                            .addComponent(label_Storage1)
                            .addComponent(label_Storage2))
                        .addGap(20, 20, 20)
                        .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_Vm_Bw)
                            .addComponent(tf_Vm_Ram, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tf_Vm_MipsPerPes)
                            .addComponent(tf_Vm_Storage)))
                    .addGroup(panel_HostType1Layout.createSequentialGroup()
                        .addComponent(label_TypeName1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_Vm_TypeName)))
                .addContainerGap())
        );
        panel_HostType1Layout.setVerticalGroup(
            panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_HostType1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_TypeName1)
                    .addComponent(tf_Vm_TypeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_NumberPes1)
                    .addComponent(tf_Vm_NumberPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_MipsPerPes1)
                    .addComponent(tf_Vm_MipsPerPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Ram1)
                    .addComponent(tf_Vm_Ram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Storage1)
                    .addComponent(tf_Vm_Storage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_HostType1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_Vm_Bw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_Storage2))
                .addContainerGap())
        );

        label_NumberVm0.setText("Số máy ảo đang chọn:");

        label_NumberVm.setText("0");

        javax.swing.GroupLayout panel_VmLayout = new javax.swing.GroupLayout(panel_Vm);
        panel_Vm.setLayout(panel_VmLayout);
        panel_VmLayout.setHorizontalGroup(
            panel_VmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_VmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_VmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScroll_Vm, javax.swing.GroupLayout.DEFAULT_SIZE, 799, Short.MAX_VALUE)
                    .addGroup(panel_VmLayout.createSequentialGroup()
                        .addComponent(label_NumberVm0)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_NumberVm, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_Vm_Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Vm_Del)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Vm_Edit)))
                .addGap(18, 18, 18)
                .addComponent(panel_HostType1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panel_VmLayout.setVerticalGroup(
            panel_VmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_VmLayout.createSequentialGroup()
                .addGroup(panel_VmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_VmLayout.createSequentialGroup()
                        .addGroup(panel_VmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_Vm_Add)
                            .addComponent(bt_Vm_Del)
                            .addComponent(bt_Vm_Edit)
                            .addComponent(label_NumberVm0)
                            .addComponent(label_NumberVm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScroll_Vm, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_VmLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panel_HostType1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        panel_Cloudlet.setBackground(new java.awt.Color(255, 255, 255));
        panel_Cloudlet.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tùy chỉnh Cloudlet", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        panel_Cloudlet.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panel_Cloudlet.setLayout(null);

        panel_CloudletAuto.setBackground(new java.awt.Color(255, 255, 255));

        tf_MinSize.setText("40000");
        tf_MinSize.addKeyListener(new KeyEvent(tf_MinSize, "NUMERIC", 10));

        jLabel1.setText("Size of Cloudlet (MI):");

        jLabel2.setText("Min:");

        jLabel3.setText("Max:");

        tf_MaxSize.setText("40000");
        tf_MaxSize.addKeyListener(new KeyEvent(tf_MaxSize, "NUMERIC", 10));

        tf_MinInputSize.setText("500");
        tf_MinInputSize.addKeyListener(new KeyEvent(tf_MinInputSize, "NUMERIC", 10));

        jLabel4.setText("Input File Size (byte):");

        jLabel5.setText("Min:");

        jLabel8.setText("Max:");

        tf_MaxInputSize.setText("500");
        tf_MaxInputSize.addKeyListener(new KeyEvent(tf_MaxInputSize, "NUMERIC", 10));

        jLabel9.setText("Min:");

        tf_MinOutputSize.setText("500");
        tf_MinOutputSize.addKeyListener(new KeyEvent(tf_MinOutputSize, "NUMERIC", 10));

        jLabel10.setText("Max:");

        tf_MaxOutputSize.setText("500");
        tf_MaxOutputSize.addKeyListener(new KeyEvent(tf_MaxOutputSize, "NUMERIC", 10));

        jLabel11.setText("Output File Size (byte):");

        jLabel12.setText("Min:");

        tf_minNumPes.setText("1");
        tf_minNumPes.addKeyListener(new KeyEvent(tf_minNumPes, "NUMERIC", 10));

        jLabel17.setText("Max:");

        tf_MaxNumPes.setText("1");

        jLabel18.setText("Number of Pes:");

        jLabel19.setText("CPU Utilization Model:");

        jLabel20.setText("Ram Utilization Model:");

        jLabel21.setText("Bandwidth Utilization Model:");

        cb_BwUtilModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Null", "Stochastic", "Full" }));

        cb_RamUtilModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Null", "Stochastic", "Full" }));

        cb_CpuUtilModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stochastic", "Full", "Null" }));

        jLabel22.setText("Keep Seed:");

        radio_EnableSeed.setBackground(new java.awt.Color(255, 255, 255));
        btg_KeepSeedOption.add(radio_EnableSeed);
        radio_EnableSeed.setSelected(true);
        radio_EnableSeed.setText("Enable");

        radio_DisableSeed.setBackground(new java.awt.Color(255, 255, 255));
        btg_KeepSeedOption.add(radio_DisableSeed);
        radio_DisableSeed.setText("Disable");

        bt_EditCloudlet.setText("Apply");
        bt_EditCloudlet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_EditCloudletActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_CloudletAutoLayout = new javax.swing.GroupLayout(panel_CloudletAuto);
        panel_CloudletAuto.setLayout(panel_CloudletAutoLayout);
        panel_CloudletAutoLayout.setHorizontalGroup(
            panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_minNumPes, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_MaxNumPes, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_MinOutputSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_MaxOutputSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_MinSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tf_MinInputSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_MaxSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_MaxInputSize, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(67, 67, 67)
                .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cb_CpuUtilModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_CloudletAutoLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cb_RamUtilModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_CloudletAutoLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_BwUtilModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radio_EnableSeed)
                        .addGap(18, 18, 18)
                        .addComponent(radio_DisableSeed)))
                .addGap(39, 39, 39)
                .addComponent(bt_EditCloudlet, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
        );
        panel_CloudletAutoLayout.setVerticalGroup(
            panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_MinSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(tf_MaxSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)
                            .addComponent(cb_CpuUtilModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_MinInputSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8)
                            .addComponent(tf_MaxInputSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20)
                            .addComponent(cb_RamUtilModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_MinOutputSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(tf_MaxOutputSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel21)
                            .addComponent(cb_BwUtilModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_CloudletAutoLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(bt_EditCloudlet, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CloudletAutoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_minNumPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel17)
                    .addComponent(tf_MaxNumPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel22)
                    .addComponent(radio_EnableSeed)
                    .addComponent(radio_DisableSeed))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        panel_Cloudlet.add(panel_CloudletAuto);
        panel_CloudletAuto.setBounds(10, 20, 1016, 125);

        javax.swing.GroupLayout panel_TabUserLayout = new javax.swing.GroupLayout(panel_TabUser);
        panel_TabUser.setLayout(panel_TabUserLayout);
        panel_TabUserLayout.setHorizontalGroup(
            panel_TabUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TabUserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_User, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_TabUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_Vm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_Cloudlet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_TabUserLayout.setVerticalGroup(
            panel_TabUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_TabUserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_TabUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_TabUserLayout.createSequentialGroup()
                        .addComponent(panel_Vm, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(panel_Cloudlet, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panel_User, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Tùy chỉnh yêu cầu User/Broker", panel_TabUser);

        label_ScenarioCurrent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label_ScenarioCurrent.setForeground(new java.awt.Color(255, 255, 255));
        label_ScenarioCurrent.setText("Kịch bản mô phỏng hiện tại:");

        bt_ChangeScenario.setBackground(new java.awt.Color(51, 153, 255));
        bt_ChangeScenario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/changesmall.png"))); // NOI18N
        bt_ChangeScenario.setText("Đổi kịch bản khác");
        bt_ChangeScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_ChangeScenarioActionPerformed(evt);
            }
        });

        bt_Run.setBackground(new java.awt.Color(51, 255, 51));
        bt_Run.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        bt_Run.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudstart.png"))); // NOI18N
        bt_Run.setText("Chạy mô phỏng");
        bt_Run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_RunActionPerformed(evt);
            }
        });

        cb_ScenarioList.setBackground(new java.awt.Color(51, 153, 255));
        cb_ScenarioList.setModel(new javax.swing.DefaultComboBoxModel(ScenarioGui.getDbName()));
        cb_ScenarioList.setEnabled(false);

        label_LogEnable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        label_LogEnable.setText("Log:");

        chb_LogEnable.setBackground(new java.awt.Color(51, 153, 255));
        chb_LogEnable.setSelected(true);
        chb_LogEnable.setText("Enable");

        javax.swing.GroupLayout panel_Main2Layout = new javax.swing.GroupLayout(panel_Main2);
        panel_Main2.setLayout(panel_Main2Layout);
        panel_Main2Layout.setHorizontalGroup(
            panel_Main2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Main2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_Main2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_Main2Layout.createSequentialGroup()
                        .addComponent(jTabbedPane2)
                        .addContainerGap())
                    .addGroup(panel_Main2Layout.createSequentialGroup()
                        .addComponent(label_ScenarioCurrent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_ScenarioList, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bt_ChangeScenario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_Run)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label_LogEnable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chb_LogEnable)
                        .addGap(72, 72, 72))))
        );
        panel_Main2Layout.setVerticalGroup(
            panel_Main2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_Main2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_Main2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_Main2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(label_ScenarioCurrent)
                        .addComponent(cb_ScenarioList))
                    .addGroup(panel_Main2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bt_Run)
                        .addComponent(bt_ChangeScenario)
                        .addComponent(label_LogEnable)
                        .addComponent(chb_LogEnable)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(panel_Main2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel_Main2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_ChangeScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_ChangeScenarioActionPerformed
        ScenarioGui sg = new ScenarioGui(this, true, scenarioName);
        //sg.setLocationRelativeTo(null);
        sg.setVisible(true);
        //updateGui(sg.scenarioName);
        if(!sg.scenarioName.equals(cb_ScenarioList.getSelectedItem().toString())){
            scenarioName = sg.scenarioName;           
            try {
                stm.close();
                con.close();
                con = Database.Open(scenarioName);
                stm = con.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(MainGui.class.getName()).log(Level.SEVERE, null, ex);
                System.exit(0);
            }
            cb_ScenarioList.setModel(new javax.swing.DefaultComboBoxModel(ScenarioGui.getDbName()));
            cb_ScenarioList.setSelectedItem(scenarioName);            
            updateDCTable();
            jTable_Datacenter.setRowSelectionInterval(0, 0);
            updateUserTable();
            jTable_User.setRowSelectionInterval(0, 0);
            updateCost(stm, (int)jTable_Datacenter.getValueAt(0, 0));
            updateSANTable((int)jTable_Datacenter.getValueAt(0, 0));
            updateHostTable((int)jTable_Datacenter.getValueAt(0, 0));
            updateVmTable((int)jTable_User.getValueAt(0, 0));
//            updateCloudlet(stm, (int)jTable_User.getValueAt(0, 0));
            updateSetting(stm);
            jTable_Host.setRowSelectionInterval(0, 0);
            updateHostType();
            jTable_Vm.setRowSelectionInterval(0, 0);
            updateVmType();
            updateCloudlet(stm, (int)jTable_User.getValueAt(0, 0));
            MyBroker.listMap = new ArrayList<>();
        }
        sg.dispose();
    }//GEN-LAST:event_bt_ChangeScenarioActionPerformed

    private void bt_User_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_User_AddActionPerformed
        try{
            db_User.Insert(stm);
            updateUserTable();
            jTable_User.setRowSelectionInterval(0, jTable_User.getRowCount()-1);
            int rootID = (int)jTable_User.getValueAt(jTable_User.getSelectedRow(), 0);
            db_Cloudlet.InsertDefault(stm, rootID);
            db_Vm.InsertDefault(stm, rootID);
            updateCloudlet(stm, rootID);
            updateVmTable(rootID);
            jTable_Vm.setRowSelectionInterval(0, 0);
            updateVmType();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Lỗi Database");
        }
    }//GEN-LAST:event_bt_User_AddActionPerformed

    private void bt_User_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_User_DelActionPerformed
        int row = jTable_User.getSelectedRow();
        if(row==-1){
            JOptionPane.showMessageDialog(null, "Chưa chọn User");
        }else if(jTable_User.getRowCount() == 1){
            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất một User để thực hiện mô phỏng");
        }else{
            try{
                int ID = (int)jTable_User.getValueAt(row, 0);
                db_User.Del(stm, ID);
                updateUserTable();
                int count = jTable_User.getRowCount();
                if(row != 0 && row == count){
                    jTable_User.setRowSelectionInterval(0,row-1);
                }else if(row != 0 && row != count){
                    jTable_User.setRowSelectionInterval(0,row);
                }else if(count != 0){
                    jTable_User.setRowSelectionInterval(0,0);
                }
                row = getMainUserID();
                updateVmTable(row);
//                updateCloudletTable(row);
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
                System.exit(-1);
            }
        }
    }//GEN-LAST:event_bt_User_DelActionPerformed

    private void bt_Vm_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Vm_AddActionPerformed
        int row = jTable_User.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn User");
        }else{
            try{
                int rootID = (int)jTable_User.getValueAt(row, 0);
                VmGui vmg = new VmGui(this, true, stm, rootID);
                vmg.setLocationRelativeTo(this);
                vmg.setVisible(true);
                if(vmg.done){
                    updateVmTable(rootID);
                    jTable_Vm.setRowSelectionInterval(0, jTable_Vm.getRowCount()-1);
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage());
            }            
        }
    }//GEN-LAST:event_bt_Vm_AddActionPerformed

    private void bt_Vm_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Vm_EditActionPerformed
        int row = jTable_Vm.getSelectedRow();                
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn VM");
        }else{    
            String[] data = new String[jTable_Vm.getColumnCount()];
            //ArrayList list = new ArrayList();
            int rootID = getMainUserID();
            //list.add(rootID);
            for(int col=0; col<jTable_Vm.getColumnCount(); col++){
                data[col] = jTable_Vm.getValueAt(row, col).toString();
            }
            VmGui vmg = new VmGui(this, true, stm, rootID, data);                            
            vmg.setLocationRelativeTo(this);
            vmg.setVisible(true);
            if(vmg.done){
                updateVmTable(rootID);
                jTable_Vm.setRowSelectionInterval(row,row);
                updateVmType();
            }else if(vmg.isEditType){
                updateVmType();
            }
        }
    }//GEN-LAST:event_bt_Vm_EditActionPerformed

    private void jTable_UserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_UserMouseClicked
        int rootID = getMainUserID();
        updateVmTable(rootID);
        updateCloudlet(stm, rootID);
        jTable_Vm.setRowSelectionInterval(0, 0);
        updateVmType();
    }//GEN-LAST:event_jTable_UserMouseClicked

    private void bt_Vm_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Vm_DelActionPerformed
        int row = jTable_Vm.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn VM");
        }else if(jTable_Vm.getRowCount() == 1){
            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất một yêu cầu VM cho User");
        }else{
            try{
                int rootID = this.getMainUserID();
                int ID = (int)jTable_Vm.getValueAt(row, 0);
                int count = jTable_Vm.getRowCount();
                if(row != 0 && row == count-1){
                    db_Vm.Del(stm, ID);
                    updateVmTable(rootID);
                    jTable_Vm.setRowSelectionInterval(0, row-1);
                }else{
                    db_Vm.Del(stm, ID);
                    db_Vm.updateVmID(stm, rootID);
                    updateVmTable(rootID);
                    if(row !=0 && row != count-1){
                        jTable_Vm.setRowSelectionInterval(0, row);
                    }else if(count != 1){
                        jTable_Vm.setRowSelectionInterval(0, 0);
                    }
                }
                updateVmType();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
                System.exit(-1);
            }            
        }
    }//GEN-LAST:event_bt_Vm_DelActionPerformed

    private void bt_SAN_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_SAN_DelActionPerformed
        int row = jTable_SAN.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn SAN");
        }else{
            try{
                int rootID = getMainDatacenterID();
                int ID = (int)jTable_SAN.getValueAt(row, 0);
                db_SAN.Del(stm, ID);
                updateSANTable(rootID);
                int count = jTable_Vm.getRowCount();
                if(row != 0 && row == count){
                    jTable_Vm.setRowSelectionInterval(0, row-1);
                }else if(row !=0 && row != count){
                    jTable_Vm.setRowSelectionInterval(0, row);
                }else if(count != 0){
                    jTable_Vm.setRowSelectionInterval(0, 0);
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
                System.exit(-1);
            }            
        }
    }//GEN-LAST:event_bt_SAN_DelActionPerformed

    private void bt_SAN_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_SAN_AddActionPerformed
        int row = jTable_Datacenter.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn Datacenter");
        }else if(!checkInputSAN()){
            JOptionPane.showMessageDialog(null,"Dữ liệu đầu vào chưa chính xác");
        }else{
            try{
                int rootID = (int)jTable_Datacenter.getValueAt(row, 0);
                Long capacity = Long.parseLong(tf_CapacitySAN.getText());
                Long bw = Long.parseLong(tf_BwSAN.getText());
                Float latency = Float.parseFloat(tf_LatencySAN.getText());
                db_SAN dbSAN = new db_SAN(rootID, tf_NameSAN.getText(), capacity, bw, latency);
                dbSAN.Insert(stm);
                updateSANTable(rootID);
                jTable_Vm.setRowSelectionInterval(0, jTable_Vm.getRowCount()-1);
                error.clear(tf_NameSAN);
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage());
            }            
        }
    }//GEN-LAST:event_bt_SAN_AddActionPerformed

    private void bt_SAN_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_SAN_EditActionPerformed
        int row = jTable_SAN.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn SAN");
        }else{
            panel_AddSAN.setVisible(false);
            panel_EditSAN.setVisible(true);
            bt_SAN_Del.setVisible(false);
            bt_SAN_Edit.setVisible(false);
            tf_Edit_NameSAN.setText((String)jTable_SAN.getValueAt(row, 1));
            tf_Edit_CapacitySAN.setText(jTable_SAN.getValueAt(row, 2).toString());
            tf_Edit_BwSAN.setText(jTable_SAN.getValueAt(row, 3).toString());
            tf_Edit_LatencySAN.setText(jTable_SAN.getValueAt(row, 4).toString());
            jTable_SAN.setEnabled(false);
            error.clear(tf_NameSAN);
        }
    }//GEN-LAST:event_bt_SAN_EditActionPerformed

    private void bt_SAN_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_SAN_CancelActionPerformed
        panel_EditSAN.setVisible(false);
        panel_AddSAN.setVisible(true);
        jTable_SAN.setEnabled(true);
        bt_SAN_Del.setVisible(true);
        bt_SAN_Edit.setVisible(true);
        jTable_SAN.setEnabled(true);
        error.clear(tf_Edit_NameSAN);
    }//GEN-LAST:event_bt_SAN_CancelActionPerformed

    private void bt_SAN_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_SAN_OkActionPerformed
        if(!checkInputSAN((String)jTable_SAN.getValueAt(jTable_SAN.getSelectedRow(), 1))){
            JOptionPane.showMessageDialog(null,"Dữ liệu đầu vào chưa chính xác");
        }else{
            int ID = (int)jTable_SAN.getValueAt(jTable_SAN.getSelectedRow(), 0);
            Long capacity = Long.parseLong(tf_Edit_CapacitySAN.getText());
            Long bw = Long.parseLong(tf_Edit_BwSAN.getText());
            Float latency = Float.parseFloat(tf_Edit_LatencySAN.getText());
            db_SAN dbSAN = new db_SAN(tf_Edit_NameSAN.getText(), capacity, bw, latency);
            dbSAN.updateSAN(stm, ID);
            panel_EditSAN.setVisible(false);
            panel_AddSAN.setVisible(true);
            jTable_SAN.setEnabled(true);
            bt_SAN_Del.setVisible(true);
            bt_SAN_Edit.setVisible(true);
            jTable_SAN.setEnabled(true);
            updateSANTable((int)jTable_Datacenter.getValueAt(jTable_Datacenter.getSelectedRow(), 0));
            error.clear(tf_Edit_NameSAN);
        }
    }//GEN-LAST:event_bt_SAN_OkActionPerformed

    private void bt_Dc_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Dc_DelActionPerformed
        try{
            int row = jTable_Datacenter.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn Datacenter");
        }else if(jTable_Datacenter.getRowCount() == 1){
            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất một Datacenter để thực hiện mô phỏng");
        }else{
                int ID = (int)jTable_Datacenter.getValueAt(row, 0);
                db_Datacenter.Del(stm, ID);
                updateDCTable();
                int count = jTable_Datacenter.getRowCount();
                if(row != 0 && row == count){
                    jTable_Datacenter.setRowSelectionInterval(0,row-1);
                }else if(row != 0 && row != count){
                    jTable_Datacenter.setRowSelectionInterval(0,row);
                }else if(count != 0){
                    jTable_Datacenter.setRowSelectionInterval(0,0);
                }
                updateCost(stm, (int)jTable_Datacenter.getValueAt((int)jTable_Datacenter.getSelectedRow(), 0));
                updateHostTable(getMainDatacenterID());         
        }
        }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
                System.exit(-1);
            }
    }//GEN-LAST:event_bt_Dc_DelActionPerformed

    private void bt_Dc_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Dc_AddActionPerformed
        DatacenterGui dg = new DatacenterGui(this, true, stm);
        dg.setLocationRelativeTo(null);
        dg.setVisible(true);
        if(dg.done){
            updateDCTable();
            jTable_Datacenter.setRowSelectionInterval(0, jTable_Datacenter.getRowCount()-1);
            int id = (int)jTable_Datacenter.getValueAt((int)jTable_Datacenter.getSelectedRow(), 0);
            updateCost(stm, id);
            db_Host.InsertDefault(stm, id);
            updateHostTable(getMainDatacenterID());
            jTable_Host.setRowSelectionInterval(0, 0);
        }               
    }//GEN-LAST:event_bt_Dc_AddActionPerformed

    private void bt_Dc_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Dc_EditActionPerformed
        int row = jTable_Datacenter.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn datacenter");
        }else{    
            String[] data = new String[jTable_Datacenter.getColumnCount()];
            for(int col=0; col<jTable_Datacenter.getColumnCount(); col++){
                data[col] = jTable_Datacenter.getValueAt(row, col).toString();
            }
            DatacenterGui dg = new DatacenterGui(this, true, stm, data);                
            dg.setLocationRelativeTo(this);
            dg.setVisible(true);
            if(dg.done){
                updateDCTable();
                jTable_Datacenter.setRowSelectionInterval(0,row);
                updateCost(stm, (int)jTable_Datacenter.getValueAt((int)jTable_Datacenter.getSelectedRow(), 0));
            }            
        }
    }//GEN-LAST:event_bt_Dc_EditActionPerformed

    private void jTable_DatacenterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_DatacenterMouseClicked
        int rootID = getMainDatacenterID();
        updateCost(stm, rootID);
        updateHostTable(rootID);
        updateSANTable(rootID);
        jTable_Host.setRowSelectionInterval(0, 0);
        updateHostType();
        //jTable_SAN.setRowSelectionInterval(0, 0);
    }//GEN-LAST:event_jTable_DatacenterMouseClicked

    private void jTable_VmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_VmMouseClicked
        updateVmType();
    }//GEN-LAST:event_jTable_VmMouseClicked

    private void bt_Host_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Host_DelActionPerformed
        int row = jTable_Host.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn Host");
        }else if(jTable_Host.getRowCount() == 1){
            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất một yêu cầu Host cho User");
        }else{
            try{
                int rootID = getMainDatacenterID();
                int ID = (int)jTable_Host.getValueAt(row, 0);
                int count = jTable_Host.getRowCount();
                if(row != 0 && row == count-1){
                    db_Host.Del(stm, ID);
                    updateHostTable(rootID);
                    jTable_Host.setRowSelectionInterval(0, row-1);
                }else{ 
                    db_Host.Del(stm, ID);
                    db_Host.updateHostID(stm, rootID);
                    updateHostTable(rootID);
                    if(row !=0 && row != count-1){
                        jTable_Host.setRowSelectionInterval(0, row);
                    }else if(count != 0){
                        jTable_Host.setRowSelectionInterval(0, 0);
                    }
                }
                updateHostType();
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
                System.exit(-1);
            }            
        }
    }//GEN-LAST:event_bt_Host_DelActionPerformed

    private void bt_Host_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Host_AddActionPerformed
        int row = jTable_Datacenter.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn Datacenter");
        }else{
            try{
                int rootID = (int)jTable_Datacenter.getValueAt(row, 0);
                HostGui hg = new HostGui(this, true, stm, rootID);
                hg.setLocationRelativeTo(this);
                hg.setVisible(true);
                if(hg.done){
                    updateHostTable(rootID);
                    jTable_Host.setRowSelectionInterval(0, jTable_Host.getRowCount()-1);
                    updateHostType();
                }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage());
            }            
        }
    }//GEN-LAST:event_bt_Host_AddActionPerformed

    private void bt_Host_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Host_EditActionPerformed
        int row = jTable_Host.getSelectedRow();                
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Chưa chọn Host");
        }else{    
            String[] data = new String[5];
            int rootID = getMainDatacenterID();
            for(int col=0; col<jTable_Host.getColumnCount(); col++){
                data[col] = jTable_Host.getValueAt(row, col).toString();
            }
            HostGui hg = new HostGui(this, true, stm, rootID, data);                            
            hg.setLocationRelativeTo(this);
            hg.setVisible(true);
            if(hg.done){
                updateHostTable(rootID);
                jTable_Host.setRowSelectionInterval(row,row);
                updateHostType();
            }else if(hg.isEditType){
                updateHostType();
            }
        }
    }//GEN-LAST:event_bt_Host_EditActionPerformed

    private void bt_RunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_RunActionPerformed
        if(jTable_Datacenter.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất 1 Data center để thực hiện mô phỏng");
        }else if(jTable_User.getRowCount() == 0){
            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất 1 User để thực hiện mô phỏng");
        }else{
//            Database.updateSetting(stm, Double.parseDouble(tf_SimulationTime.getText()), cb_VmPlacementPolicy.getSelectedItem().toString(), cb_VmSelectionPolicy.getSelectedItem().toString(), Double.parseDouble(tf_UpperThreshold.getText()), Double.parseDouble(tf_LowerThreshold.getText()), Double.parseDouble(tf_DCInterval.getText()), Double.parseDouble(tf_DCInterval.getText()));
//            boolean logEnable = chb_LogEnable.isSelected();
//            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//            if(radio_NoCompare.isSelected()){
//                Simulation run = new Simulation(stm, logEnable, "", "", mainSeed);
//                run.start();
//                ResultGui rsGUI = new ResultGui(run.out, cb_VmPlacementPolicy.getSelectedItem().toString(), cb_VmSelectionPolicy.getSelectedItem().toString(), run.output);
//                rsGUI.setLocationRelativeTo(null);
//                rsGUI.setVisible(true);
//                ChartDemo chart = new ChartDemo(null, run.metric);
//                chart.setVisible(true);  
//                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//            }else{
//                Simulation run1 = new Simulation(stm, false, "", "", mainSeed);
//                run1.start();
//                Simulation run2 = new Simulation(stm, false, cb_VmPlacementPolicy1.getSelectedItem().toString(), cb_VmSelectionPolicy1.getSelectedItem().toString(), mainSeed);
//                run2.start();
//                ResultCompareGui rsCompareGui = new ResultCompareGui(cb_VmPlacementPolicy.getSelectedItem().toString(), cb_VmSelectionPolicy.getSelectedItem().toString(), cb_VmPlacementPolicy1.getSelectedItem().toString(), cb_VmSelectionPolicy1.getSelectedItem().toString(), run1.output, run2.output);
//                rsCompareGui.setLocationRelativeTo(null);
//                
//                String policy1 = cb_VmSelectionPolicy.getSelectedItem().toString() + "-" + cb_VmPlacementPolicy.getSelectedItem().toString();
//                String policy2 = cb_VmSelectionPolicy1.getSelectedItem().toString() + "-" + cb_VmPlacementPolicy1.getSelectedItem().toString();
//                ChartDemo chart = new ChartDemo(policy1, policy2, run1.metric, run2.metric);
//                chart.setVisible(true);
//                rsCompareGui.setVisible(true);
//                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//            }
            Simulation.start(stm);
        }
    }//GEN-LAST:event_bt_RunActionPerformed

    private void jTable_HostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_HostMouseClicked
        updateHostType();
    }//GEN-LAST:event_jTable_HostMouseClicked

    private void radio_DetailItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_DetailItemStateChanged
        panel_CloudletAuto.setVisible(false);
        jScroll_Cloudlet.setVisible(true);
        bt_Cloudlet_Add.setVisible(true);
        bt_Cloudlet_Del.setVisible(true);
        bt_Cloudlet_Edit.setVisible(true);
    }//GEN-LAST:event_radio_DetailItemStateChanged

    private void radio_AutoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio_AutoItemStateChanged
        jScroll_Cloudlet.setVisible(false);
        bt_Cloudlet_Add.setVisible(false);
        bt_Cloudlet_Del.setVisible(false);
        bt_Cloudlet_Edit.setVisible(false);
        panel_CloudletAuto.setVisible(true);
    }//GEN-LAST:event_radio_AutoItemStateChanged

    private void bt_Cloudlet_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Cloudlet_EditActionPerformed
//        int row = jTable_Cloudlet.getSelectedRow();
//        if(row == -1){
//            JOptionPane.showMessageDialog(null, "Chưa chọn Cloudlet");
//        }else{
//            String[] data = new String[9];
//            int rootID = getMainUserID();
//            for(int col=0; col<jTable_Cloudlet.getColumnCount(); col++){
//                data[col] = jTable_Cloudlet.getValueAt(row, col).toString();
//            }
//            CloudletGui cg = new CloudletGui(this, true, stm, rootID, data);
//            cg.setLocationRelativeTo(this);
//            cg.setVisible(true);
//            if(cg.done){
//                updateCloudletTable(rootID);
//                jTable_Cloudlet.setRowSelectionInterval(row,row);
//            }
//        }
    }//GEN-LAST:event_bt_Cloudlet_EditActionPerformed

    private void bt_Cloudlet_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Cloudlet_DelActionPerformed
//        int row = jTable_Cloudlet.getSelectedRow();
//        if(row == -1){
//            JOptionPane.showMessageDialog(null, "Chưa chọn Cloudlet");
//        }else if(jTable_Cloudlet.getRowCount() == 1){
//            JOptionPane.showMessageDialog(null, "Bạn cần ít nhất một yêu cầu Cloudlet cho User");
//        }else{
//            try{
//                int rootID = getMainUserID();
//                int ID = (int)jTable_Cloudlet.getValueAt(row, 0);
//                db_Cloudlet.Del(stm, ID);
//                db_Cloudlet.updateCloudletID(stm, rootID);
//                updateCloudletTable(rootID);
//                int count = jTable_Cloudlet.getRowCount();
//                if(row != 0 && row == count){
//                    jTable_Cloudlet.setRowSelectionInterval(0, row-1);
//                }else if(row !=0 && row != count){
//                    jTable_Cloudlet.setRowSelectionInterval(0, row);
//                }else if(count != 0){
//                    jTable_Cloudlet.setRowSelectionInterval(0, 0);
//                }
//            }catch(Exception e){
//                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
//                System.exit(-1);
//            }
//        }
    }//GEN-LAST:event_bt_Cloudlet_DelActionPerformed

    private void bt_Cloudlet_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Cloudlet_AddActionPerformed
//        int row = jTable_User.getSelectedRow();
//        if(row == -1){
//            JOptionPane.showMessageDialog(null, "Chưa chọn User");
//        }else{
//            try{
//                int rootID = (int)jTable_User.getValueAt(row, 0);
//                CloudletGui cg = new CloudletGui(this, true, stm, rootID);
//                cg.setLocationRelativeTo(this);
//                cg.setVisible(true);
//                if(cg.done){
//                    updateCloudletTable(rootID);
//                    jTable_Cloudlet.setRowSelectionInterval(0, jTable_Cloudlet.getRowCount()-1);
//                }
//            }catch(Exception e){
//                JOptionPane.showMessageDialog(null,"Error: " + e.getMessage());
//            }
//        }
    }//GEN-LAST:event_bt_Cloudlet_AddActionPerformed

    private void bt_EditCloudletActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_EditCloudletActionPerformed
        long minSize = Long.parseLong(tf_MinSize.getText());
        long maxSize = Long.parseLong(tf_MaxSize.getText());
        long minInput = Long.parseLong(tf_MinInputSize.getText());
        long maxInput = Long.parseLong(tf_MaxInputSize.getText());
        long minOutput = Long.parseLong(tf_MinOutputSize.getText());
        long maxOutput = Long.parseLong(tf_MaxOutputSize.getText());
        int minNumPes = Integer.parseInt(tf_minNumPes.getText());
        int maxNumPes = Integer.parseInt(tf_MaxNumPes.getText());
        String cpuUtil = cb_CpuUtilModel.getSelectedItem().toString();
        String ramUtil = cb_RamUtilModel.getSelectedItem().toString();
        String bwUtil = cb_BwUtilModel.getSelectedItem().toString();
        String keepSeed;
        if(radio_EnableSeed.isSelected()) keepSeed = "Enable";
        else keepSeed = "Disable";
        int rootID = (int)jTable_User.getValueAt(jTable_User.getSelectedRow(), 0);
        db_Cloudlet cloudlet = new db_Cloudlet(rootID , minSize, maxSize, minInput, maxInput, minOutput, maxOutput, minNumPes, maxNumPes, cpuUtil, ramUtil, bwUtil, keepSeed);
        cloudlet.updateCloudlet(stm, rootID);
    }//GEN-LAST:event_bt_EditCloudletActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    protected void updateHostType(){
        String typeName = jTable_Host.getValueAt(jTable_Host.getSelectedRow(), 2).toString();
        db_HostType.Open();
        String[] data = db_HostType.getTypeInfo(typeName);
        db_HostType.Close();
        tf_Host_TypeName.setText(typeName);
        tf_Host_NumberPes.setText(data[0]);
        tf_Host_MipsPerPes.setText(data[1]);
        tf_Host_Ram.setText(data[2]);
        tf_Host_Storage.setText(data[3]);
        String powerModel;
        if(!data[4].contains("-")){
            powerModel = "Power Model: " + data[4] + "\nMax Power(W): " + data[5] + "\nStatic Power(%): " + data[6]; 
        }else{
            String[] power = data[4].split("-");
            powerModel = "Điện năng tiêu thụ theo \ncpu utilization (W):\nIdle: " + power[0] + " W\n10%:  " + power[1] + " W\n20%:  " + power[2] + " W\n30%:  " + power[3] + " W\n40%:  " + power[4] + " W\n50%:  " + power[5] + " W\n60%:  " + power[6] + " W\n70%:  " + power[7] + " W\n80%:  " + power[8] + " W\n90%:  " + power[9] + " W\n100%: " + power[10] + " W";  
        }
        ta_PowerModel.setText(powerModel);
        
        String hostID = jTable_Host.getValueAt(jTable_Host.getSelectedRow(), 1).toString();
        if(!hostID.contains("-")){
            label_NumberHost.setText("1");
        }else{
            String[] number = hostID.split("-");
            int temp = Integer.parseInt(number[1]) - Integer.parseInt(number[0]) + 1;
            label_NumberHost.setText(Integer.toString(temp));
        }
    }
    
    protected void updateVmType(){
        String typeName = jTable_Vm.getValueAt(jTable_Vm.getSelectedRow(), 2).toString();
        db_VmType.Open();
        String[] data = db_VmType.getTypeInfo(typeName);
        db_VmType.Close();
        tf_Vm_TypeName.setText(typeName);
        tf_Vm_NumberPes.setText(data[0]);
        tf_Vm_MipsPerPes.setText(data[1]);
        tf_Vm_Ram.setText(data[2]);
        tf_Vm_Storage.setText(data[3]);
        tf_Vm_Bw.setText(data[4]);
        
        String vmID = jTable_Vm.getValueAt(jTable_Vm.getSelectedRow(), 1).toString();
        if(!vmID.contains("-")){
            label_NumberVm.setText("1");
        }else{
            String[] number = vmID.split("-");
            int temp = Integer.parseInt(number[1]) - Integer.parseInt(number[0]) + 1;
            label_NumberVm.setText(Integer.toString(temp));
        }
    }
    
    protected void updateUserTable(){
        try{
//            Database.Open(scenarioName);
            jTable_User.setModel(new rsTable(Database.getUserTable(stm)));
            jTable_User.getColumnModel().getColumn(0).setMinWidth(0);
            jTable_User.getColumnModel().getColumn(0).setMaxWidth(0);
            String row = jTable_User.getRowCount() + "";
            label_NumberUser.setText(row);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
            //System.exit(-1);
        }
    }
    
    protected void updateVmTable(int rootID){
        try{
            jTable_Vm.setModel(new rsTable(Database.getVmTable(stm, rootID)));
            jTable_Vm.getColumnModel().getColumn(0).setMinWidth(0);
            jTable_Vm.getColumnModel().getColumn(0).setMaxWidth(0);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
            //System.exit(-1);
        }
    }
    
    protected void updateCloudletTable(int rootID){
        try{
            jTable_Cloudlet.setModel(new rsTable(Database.getCloudletTable(stm, rootID)));
            jTable_Cloudlet.getColumnModel().getColumn(0).setMinWidth(0);
            jTable_Cloudlet.getColumnModel().getColumn(0).setMaxWidth(0);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
            //System.exit(-1);
        }
    }
    
    protected void updateSANTable(int rootID){
        try{
            jTable_SAN.setModel(new rsTable(Database.getSANTable(stm, rootID)));
            jTable_SAN.getColumnModel().getColumn(0).setMinWidth(0);
            jTable_SAN.getColumnModel().getColumn(0).setMaxWidth(0);
            String temp = jTable_SAN.getRowCount() + "";
            label_NumberSAN.setText(temp);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
            //System.exit(-1);
        }
    }
    
    protected void updateDCTable(){
        try{
            jTable_Datacenter.setModel(new rsTable(Database.getDatacenterTable(stm)));
            jTable_Datacenter.getColumnModel().getColumn(0).setMinWidth(0);
            jTable_Datacenter.getColumnModel().getColumn(0).setMaxWidth(0);
            String temp = jTable_Datacenter.getRowCount() + "";
            label_NumberDC.setText(temp);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
            //System.exit(-1);
        }
    }
    
    protected void updateHostTable(int rootID){
        try{
        jTable_Host.setModel(new rsTable(Database.getHostTable(stm, rootID)));
        jTable_Host.getColumnModel().getColumn(0).setMinWidth(0);
        jTable_Host.getColumnModel().getColumn(0).setMaxWidth(0);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " + e.getMessage() +", Thoát chương trình");
            //System.exit(-1);
        }
    }
    
    protected int getMainUserID(){
        int row = jTable_User.getSelectedRow();
        int ID = -1;
        if(row != -1){
            ID = (int)jTable_User.getValueAt(row, 0);
        }
        return ID;
    }
    
    protected int getMainDatacenterID(){
        int row = jTable_Datacenter.getSelectedRow();
        int ID = -1;
        if(row != -1){
            ID = (int)jTable_Datacenter.getValueAt(row, 0);
        }
        return ID;
    }
    
    protected void updateCost(Statement stm, int id){
        String[] data = db_Datacenter.getCost(stm, id);
        tf_CostPerSecond.setText(data[0]);
        tf_CostPerRam.setText(data[1]);
        tf_CostPerStorage.setText(data[2]);
        tf_CostPerBw.setText(data[3]);
    }
    
    protected void updateSetting(Statement stm){
        ArrayList data = Database.getSetting(stm);
//        tf_SimulationTime.setText(data.get(0).toString());
//        cb_VmPlacementPolicy.setSelectedItem(data.get(1));
//        cb_VmSelectionPolicy.setSelectedItem(data.get(2));
//        tf_UpperThreshold.setText(data.get(3).toString());
//        tf_LowerThreshold.setText(data.get(4).toString());
//        tf_DCInterval.setText(data.get(5).toString());
//        tf_VmInterval.setText(data.get(6).toString());
    }
    
    protected void updateCloudlet(Statement stm, int id){
        ArrayList data = db_Cloudlet.getCloudletTable(stm, id);
        tf_MinSize.setText(data.get(0).toString());
        tf_MaxSize.setText(data.get(1).toString());
        tf_MinInputSize.setText(data.get(2).toString());
        tf_MaxInputSize.setText(data.get(3).toString());
        tf_MinOutputSize.setText(data.get(4).toString());
        tf_MaxOutputSize.setText(data.get(5).toString());
        tf_minNumPes.setText(data.get(6).toString());
        tf_MaxNumPes.setText(data.get(7).toString());
        cb_CpuUtilModel.setSelectedItem((String)data.get(8));
        cb_RamUtilModel.setSelectedItem((String)data.get(9));
        cb_BwUtilModel.setSelectedItem((String)data.get(10));
        if(data.get(11).equals("Enable")){
            radio_EnableSeed.setSelected(true);
        }else{
            radio_DisableSeed.setSelected(true);
        }
    }
    
    protected boolean checkInputSAN(){
        if(tf_NameSAN.getText().equals("")){
            error.setError(tf_NameSAN, "Chưa nhập tên SAN");
            return false;
        }else{
            int row = jTable_SAN.getRowCount();
            for(int i=0; i<row; i++){
                if(tf_NameSAN.getText().equals(jTable_SAN.getValueAt(i, 1).toString())){
                    error.setError(tf_NameSAN, "Tên SAN đã được sử dụng");
                    return false;
                }
            }
        }
        return true;
    }
    
    protected boolean checkInputSAN(String oldName){
        if(tf_Edit_NameSAN.getText().equals("")){
            error.setError(tf_Edit_NameSAN, "Chưa nhập tên SAN");
            return false;
        }else{
            int row = jTable_SAN.getRowCount();
            for(int i=0; i<row; i++){
                if(tf_Edit_NameSAN.getText().equals(jTable_SAN.getValueAt(i, 1).toString()) && !tf_Edit_NameSAN.getText().equals(oldName)){
                    error.setError(tf_Edit_NameSAN, "Tên SAN đã được sử dụng");
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainGui().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_ChangeScenario;
    private javax.swing.JButton bt_Cloudlet_Add;
    private javax.swing.JButton bt_Cloudlet_Del;
    private javax.swing.JButton bt_Cloudlet_Edit;
    private javax.swing.JButton bt_Dc_Add;
    private javax.swing.JButton bt_Dc_Del;
    private javax.swing.JButton bt_Dc_Edit;
    private javax.swing.JButton bt_EditCloudlet;
    private javax.swing.JButton bt_Host_Add;
    private javax.swing.JButton bt_Host_Del;
    private javax.swing.JButton bt_Host_Edit;
    private javax.swing.JButton bt_Overview;
    private javax.swing.JButton bt_Run;
    private javax.swing.JButton bt_SAN_Add;
    private javax.swing.JButton bt_SAN_Cancel;
    private javax.swing.JButton bt_SAN_Del;
    private javax.swing.JButton bt_SAN_Edit;
    private javax.swing.JButton bt_SAN_Ok;
    private javax.swing.JButton bt_User_Add;
    private javax.swing.JButton bt_User_Del;
    private javax.swing.JButton bt_Vm_Add;
    private javax.swing.JButton bt_Vm_Del;
    private javax.swing.JButton bt_Vm_Edit;
    private javax.swing.ButtonGroup btg_CloudletOption;
    private javax.swing.ButtonGroup btg_Compare;
    private javax.swing.ButtonGroup btg_KeepSeedOption;
    private javax.swing.JComboBox cb_BwUtilModel;
    private javax.swing.JComboBox cb_CpuUtilModel;
    private javax.swing.JComboBox cb_RamUtilModel;
    private javax.swing.JComboBox cb_ScenarioList;
    private javax.swing.JCheckBox chb_LogEnable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScroll_Cloudlet;
    private javax.swing.JScrollPane jScroll_Datacenter;
    private javax.swing.JScrollPane jScroll_Host;
    private javax.swing.JScrollPane jScroll_SAN;
    private javax.swing.JScrollPane jScroll_User;
    private javax.swing.JScrollPane jScroll_Vm;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable_Cloudlet;
    private javax.swing.JTable jTable_Datacenter;
    private javax.swing.JTable jTable_Host;
    private javax.swing.JTable jTable_SAN;
    private javax.swing.JTable jTable_User;
    private javax.swing.JTable jTable_Vm;
    private javax.swing.JLabel label_DatacenterCapacity;
    private javax.swing.JLabel label_Dc_BwCapacity;
    private javax.swing.JLabel label_Dc_RamCapacity;
    private javax.swing.JLabel label_Dc_StorageCapacity;
    private javax.swing.JLabel label_Edit_BwSAN;
    private javax.swing.JLabel label_Edit_CapacitySAN;
    private javax.swing.JLabel label_Edit_LatencySAN;
    private javax.swing.JLabel label_Edit_NameSAN;
    private javax.swing.JLabel label_LogEnable;
    private javax.swing.JLabel label_MipsPerPes;
    private javax.swing.JLabel label_MipsPerPes1;
    private javax.swing.JLabel label_MipsPerPes2;
    private javax.swing.JLabel label_NumberDC;
    private javax.swing.JLabel label_NumberDC0;
    private javax.swing.JLabel label_NumberDatacenter;
    private javax.swing.JLabel label_NumberHost;
    private javax.swing.JLabel label_NumberHost0;
    private javax.swing.JLabel label_NumberPes;
    private javax.swing.JLabel label_NumberPes1;
    private javax.swing.JLabel label_NumberPes2;
    private javax.swing.JLabel label_NumberSAN;
    private javax.swing.JLabel label_NumberSAN0;
    private javax.swing.JLabel label_NumberUser;
    private javax.swing.JLabel label_NumberUser0;
    private javax.swing.JLabel label_NumberVm;
    private javax.swing.JLabel label_NumberVm0;
    private javax.swing.JLabel label_Ram;
    private javax.swing.JLabel label_Ram1;
    private javax.swing.JLabel label_Ram2;
    private javax.swing.JLabel label_ScenarioCurrent;
    private javax.swing.JLabel label_Storage;
    private javax.swing.JLabel label_Storage1;
    private javax.swing.JLabel label_Storage2;
    private javax.swing.JLabel label_TotalBwCapacity;
    private javax.swing.JLabel label_TotalCapacity;
    private javax.swing.JLabel label_TotalRamCapacity;
    private javax.swing.JLabel label_TotalStorageCapacity;
    private javax.swing.JLabel label_TypeName;
    private javax.swing.JLabel label_TypeName1;
    private javax.swing.JLabel label_TypeName2;
    private javax.swing.JPanel panel_AddSAN;
    private javax.swing.JPanel panel_Cloudlet;
    private javax.swing.JPanel panel_CloudletAuto;
    private javax.swing.JPanel panel_CloudletOption;
    private javax.swing.JPanel panel_Cost;
    private javax.swing.JPanel panel_Datacenter;
    private javax.swing.JPanel panel_EditSAN;
    private javax.swing.JPanel panel_Host;
    private javax.swing.JPanel panel_Host1;
    private javax.swing.JPanel panel_HostType;
    private javax.swing.JPanel panel_HostType1;
    private javax.swing.JPanel panel_Main;
    private javax.swing.JPanel panel_Main2;
    private javax.swing.JPanel panel_SAN;
    private javax.swing.JPanel panel_SAN1;
    private javax.swing.JPanel panel_TabDatacenter;
    private javax.swing.JPanel panel_TabUser;
    private javax.swing.JPanel panel_TempSAN;
    private javax.swing.JPanel panel_User;
    private javax.swing.JPanel panel_Vm;
    private javax.swing.JRadioButton radio_Auto;
    private javax.swing.JRadioButton radio_Detail;
    private javax.swing.JRadioButton radio_DisableSeed;
    private javax.swing.JRadioButton radio_EnableSeed;
    private javax.swing.JTextArea ta_PowerModel;
    private javax.swing.JTextField tf_BwSAN;
    private javax.swing.JTextField tf_CapacitySAN;
    private javax.swing.JTextField tf_CostPerBw;
    private javax.swing.JTextField tf_CostPerRam;
    private javax.swing.JTextField tf_CostPerSecond;
    private javax.swing.JTextField tf_CostPerStorage;
    private javax.swing.JTextField tf_Dc_BwCapacity;
    private javax.swing.JTextField tf_Dc_RamCapacity;
    private javax.swing.JTextField tf_Dc_StorageCapacity;
    private javax.swing.JTextField tf_Edit_BwSAN;
    private javax.swing.JTextField tf_Edit_CapacitySAN;
    private javax.swing.JTextField tf_Edit_LatencySAN;
    private javax.swing.JTextField tf_Edit_NameSAN;
    private javax.swing.JTextField tf_Host_MipsPerPes;
    private javax.swing.JTextField tf_Host_NumberPes;
    private javax.swing.JTextField tf_Host_Ram;
    private javax.swing.JTextField tf_Host_Storage;
    private javax.swing.JTextField tf_Host_TypeName;
    private javax.swing.JTextField tf_LatencySAN;
    private javax.swing.JTextField tf_MaxInputSize;
    private javax.swing.JTextField tf_MaxNumPes;
    private javax.swing.JTextField tf_MaxOutputSize;
    private javax.swing.JTextField tf_MaxSize;
    private javax.swing.JTextField tf_MinInputSize;
    private javax.swing.JTextField tf_MinOutputSize;
    private javax.swing.JTextField tf_MinSize;
    private javax.swing.JTextField tf_NameSAN;
    private javax.swing.JTextField tf_NumberDatacenter;
    private javax.swing.JTextField tf_TotalBwCapacity;
    private javax.swing.JTextField tf_TotalRamCapacity;
    private javax.swing.JTextField tf_TotalStorageCapacity;
    private javax.swing.JTextField tf_Vm_Bw;
    private javax.swing.JTextField tf_Vm_MipsPerPes;
    private javax.swing.JTextField tf_Vm_NumberPes;
    private javax.swing.JTextField tf_Vm_Ram;
    private javax.swing.JTextField tf_Vm_Storage;
    private javax.swing.JTextField tf_Vm_TypeName;
    private javax.swing.JTextField tf_minNumPes;
    // End of variables declaration//GEN-END:variables
}
