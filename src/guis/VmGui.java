/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import Database.db_Vm;
import Database.db_VmType;
import Support.Check;
import Support.KeyEvent;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JErrorProvider;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author GC
 */
public class VmGui extends javax.swing.JDialog {
 
    public boolean done = true;
    public boolean isEditType = false;
    public final static String[] title = {"Thêm Vm", "Sửa Vm"};
    public final static String[] text = {"Thêm", "Sửa"};
    public final static int ADD = 0;
    public final static int EDIT = 1;
    public static Statement stm;
    
    private boolean doneType;
    private int option;
    private int ID;
    private int rootID;
    private int vmTypeID = -1;
    JErrorProvider error = new JErrorProvider();
//    private String dbName;
    /**
     * Creates new form VmGui
     */
    public VmGui(java.awt.Frame parent, boolean modal, Statement stm, int rootID) {
        super(parent, modal);
        option = ADD;
        this.rootID = rootID;
        this.stm = stm;
        this.ID = -1;
        try {          
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            initComponents();
            this.setLocationRelativeTo(parent);
            this.setTitle(title[option]);
            panel_VmGui.setBorder(javax.swing.BorderFactory.createTitledBorder(null, title[option], javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
            bt_Ok.setText(text[option]); 
            updateTypeList(vmTypeList);
            vmTypeList.setSelectedIndex(0);
            updateVmTypeInfo(vmTypeList.getSelectedValue().toString());
            bt_Ok1.setVisible(false);
            bt_Cancel1.setVisible(false);
            emptyName();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            Logger.getLogger(VmGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(VmGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(VmGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public VmGui(java.awt.Frame parent, boolean modal, Statement stm, int rootID, String[] data) {
        super(parent, modal);
        option = EDIT;
        this.rootID = rootID;
        this.stm = stm;
        this.ID = Integer.parseInt(data[0]);
        
        try {          
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            initComponents();
            this.setLocationRelativeTo(parent);
            this.setTitle(title[option]);
            panel_VmGui.setBorder(javax.swing.BorderFactory.createTitledBorder(null, title[option], javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
            bt_Ok.setText(text[option]);
            bt_Ok1.setVisible(false);
            bt_Cancel1.setVisible(false);
            emptyName();
            
            String number = data[1];
            if(number.contains("-")){
                String num[] = number.split("-");
                int k = Integer.parseInt(num[1]) - Integer.parseInt(num[0]) + 1;
                number = Integer.toString(k);
            }else number = "1";
            
            tf_NumVm.setText(number);
            vmTypeList.setSelectedValue(data[2], true);
            tf_Vmm.setText(data[3]);
            cb_CloudletPolicy.setSelectedItem(data[4]);
            updateVmTypeInfo(data[2]);
            updateTypeList(vmTypeList);
            vmTypeList.setSelectedValue(data[2], true);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            Logger.getLogger(VmGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(VmGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(VmGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        panel_SelectVmType = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        vmTypeList = new javax.swing.JList();
        panel_AddVmType = new javax.swing.JPanel();
        tf_Name = new javax.swing.JTextField();
        label_Name = new javax.swing.JLabel();
        label_NumPes = new javax.swing.JLabel();
        tf_NumPes = new javax.swing.JTextField();
        label_Mips = new javax.swing.JLabel();
        tf_Mips = new javax.swing.JTextField();
        label_Ram = new javax.swing.JLabel();
        tf_Ram = new javax.swing.JTextField();
        label_Storage = new javax.swing.JLabel();
        tf_Storage = new javax.swing.JTextField();
        label_Bw = new javax.swing.JLabel();
        tf_Bw = new javax.swing.JTextField();
        bt_AddVmType = new javax.swing.JButton();
        bt_Ok1 = new javax.swing.JButton();
        bt_Cancel1 = new javax.swing.JButton();
        bt_DelVmType = new javax.swing.JButton();
        panel_VmGui = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        label_NumPesInfo = new javax.swing.JLabel();
        label_MipsInfo = new javax.swing.JLabel();
        label_NameInfo = new javax.swing.JLabel();
        label_RamInfo = new javax.swing.JLabel();
        label_StorageInfo = new javax.swing.JLabel();
        tf_NameInfo = new javax.swing.JTextField();
        tf_NumPesInfo = new javax.swing.JTextField();
        tf_MipsInfo = new javax.swing.JTextField();
        tf_RamInfo = new javax.swing.JTextField();
        tf_StorageInfo = new javax.swing.JTextField();
        label_BwInfo = new javax.swing.JLabel();
        tf_BwInfo = new javax.swing.JTextField();
        label_Vmm = new javax.swing.JLabel();
        tf_Vmm = new javax.swing.JTextField();
        label_CloudletPolicy = new javax.swing.JLabel();
        cb_CloudletPolicy = new javax.swing.JComboBox();
        label_NumVm = new javax.swing.JLabel();
        tf_NumVm = new javax.swing.JTextField();
        bt_Ok = new javax.swing.JButton();
        bt_Cancel = new javax.swing.JButton();
        bt_EditVmType = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(51, 153, 255));

        panel_SelectVmType.setBackground(new java.awt.Color(153, 204, 255));
        panel_SelectVmType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chọn Vm Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        vmTypeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        vmTypeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                vmTypeListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(vmTypeList);

        javax.swing.GroupLayout panel_SelectVmTypeLayout = new javax.swing.GroupLayout(panel_SelectVmType);
        panel_SelectVmType.setLayout(panel_SelectVmTypeLayout);
        panel_SelectVmTypeLayout.setHorizontalGroup(
            panel_SelectVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        panel_SelectVmTypeLayout.setVerticalGroup(
            panel_SelectVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        panel_AddVmType.setBackground(new java.awt.Color(153, 204, 255));
        panel_AddVmType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thêm mẫu Vm mới", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        tf_Name.setToolTipText("Tên của mẫu máy ảo (tên không chứa ký tự đặc biệt)");
        tf_Name.addKeyListener(new KeyEvent(tf_Name, "CHAR", 35));
        tf_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_NameFocusLost(evt);
            }
        });

        label_Name.setText("Name:");
        label_Name.setToolTipText("Tên của mẫu máy ảo (tên không chứa ký tự đặc biệt)");

        label_NumPes.setText("Số Pe:");
        label_NumPes.setToolTipText("Số lượng phần tử xử lý của máy ảo");

        tf_NumPes.setText("1");
        tf_NumPes.setToolTipText("Số lượng phần tử xử lý của máy ảo");
        tf_NumPes.addKeyListener(new KeyEvent(tf_NumPes, "NUMERIC", 2));
        tf_NumPes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_NumPesFocusLost(evt);
            }
        });

        label_Mips.setText("Mips mỗi Pe:");
        label_Mips.setToolTipText("<html>Khả năng xử lý của mỗi thành phần xử lý<br>Đơn vị: Mips<br>Giá trị: >= 0.000001</html>");

        tf_Mips.setText("1000");
        tf_Mips.setToolTipText("<html>Khả năng xử lý của mỗi thành phần xử lý<br>Đơn vị: Mips<br>Giá trị: >= 0.000001</html>");
        tf_Mips.addKeyListener(new KeyEvent(tf_Mips, "NUMERIC_DOT", 12));
        tf_Mips.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_MipsFocusLost(evt);
            }
        });

        label_Ram.setText("Ram(MB):");
        label_Ram.setToolTipText("<html>Dung lượng Ram của máy ảo<br>Đơn vị: MB<br>Giá trị: >0</html>");

        tf_Ram.setText("1024");
        tf_Ram.setToolTipText("<html>Dung lượng Ram của máy ảo<br>Đơn vị: MB<br>Giá trị: >0</html>");
        tf_Ram.addKeyListener(new KeyEvent(tf_Ram, "NUMERIC", 6));
        tf_Ram.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_RamFocusLost(evt);
            }
        });

        label_Storage.setText("Storage(MB):");
        label_Storage.setToolTipText("<html>Khả năng lưu trữ của máy ảo<br>Đơn vị: MB<br>Giá trị: >0</html>");

        tf_Storage.setText("2500");
        tf_Storage.setToolTipText("<html>Khả năng lưu trữ của máy ảo<br>Đơn vị: MB<br>Giá trị: >0</html>");
        tf_Storage.addKeyListener(new KeyEvent(tf_Storage, "NUMERIC", 12));
        tf_Storage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_StorageFocusLost(evt);
            }
        });

        label_Bw.setText("Bandwidth(Kbps):");
        label_Bw.setToolTipText("<html>Băng thông mạng của máy ảo<br>Đơn vị: Mbps<br>Giá trị: >0</html>");

        tf_Bw.setText("100");
        tf_Bw.setToolTipText("<html>Băng thông mạng của máy ảo<br>Đơn vị: Mbps<br>Giá trị: >0</html>");
        tf_Bw.addKeyListener(new KeyEvent(tf_Bw, "NUMERIC", 12));
        tf_Bw.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_BwFocusLost(evt);
            }
        });

        bt_AddVmType.setBackground(new java.awt.Color(51, 153, 255));
        bt_AddVmType.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bt_AddVmType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cloudaddsmall.png"))); // NOI18N
        bt_AddVmType.setText("Thêm mẫu Vm");
        bt_AddVmType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_AddVmTypeActionPerformed(evt);
            }
        });

        bt_Ok1.setBackground(new java.awt.Color(153, 204, 240));
        bt_Ok1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/oksmall.png"))); // NOI18N
        bt_Ok1.setText("Sửa ");
        bt_Ok1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Ok1ActionPerformed(evt);
            }
        });

        bt_Cancel1.setBackground(new java.awt.Color(153, 204, 240));
        bt_Cancel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cancelsmall.png"))); // NOI18N
        bt_Cancel1.setText("Hủy");
        bt_Cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_Cancel1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_AddVmTypeLayout = new javax.swing.GroupLayout(panel_AddVmType);
        panel_AddVmType.setLayout(panel_AddVmTypeLayout);
        panel_AddVmTypeLayout.setHorizontalGroup(
            panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(label_Name)
                        .addGap(4, 4, 4)
                        .addComponent(tf_Name, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(label_NumPes)
                        .addGap(4, 4, 4)
                        .addComponent(tf_NumPes, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(label_Mips)
                        .addGap(4, 4, 4)
                        .addComponent(tf_Mips, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(label_Ram)
                        .addGap(4, 4, 4)
                        .addComponent(tf_Ram, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bt_Ok1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(bt_Cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(bt_AddVmType))))
                    .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                            .addComponent(label_Bw)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(tf_Bw, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                            .addComponent(label_Storage)
                            .addGap(4, 4, 4)
                            .addComponent(tf_Storage, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37))
        );
        panel_AddVmTypeLayout.setVerticalGroup(
            panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(label_Name))
                    .addComponent(tf_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(label_NumPes))
                    .addComponent(tf_NumPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(label_Mips))
                    .addComponent(tf_Mips, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(label_Ram))
                    .addComponent(tf_Ram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(label_Storage))
                    .addComponent(tf_Storage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Bw)
                    .addComponent(tf_Bw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_AddVmType)
                    .addGroup(panel_AddVmTypeLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(panel_AddVmTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bt_Ok1)
                            .addComponent(bt_Cancel1)))))
        );

        bt_DelVmType.setBackground(new java.awt.Color(51, 153, 255));
        bt_DelVmType.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bt_DelVmType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_DelVmType.setText("Xóa mẫu Vm");
        bt_DelVmType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_DelVmTypeActionPerformed(evt);
            }
        });

        panel_VmGui.setBackground(new java.awt.Color(153, 204, 240));
        panel_VmGui.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thêm Vm", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vm Type Specification", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N
        jPanel10.setPreferredSize(new java.awt.Dimension(820, 200));

        label_NumPesInfo.setText("Number of Pes:");
        label_NumPesInfo.setToolTipText("Số lượng phần tử xử lý của máy ảo");

        label_MipsInfo.setText("Mips of Pes:");
        label_MipsInfo.setToolTipText("<html>Khả năng xử lý của mỗi thành phần xử lý<br>Đơn vị: Mips</html>");

        label_NameInfo.setText("Type Name:");
        label_NameInfo.setToolTipText("Tên của mẫu máy ảo (tên không chứa ký tự đặc biệt)");

        label_RamInfo.setText("Ram(MB):");
        label_RamInfo.setToolTipText("<html>Dung lượng Ram của máy ảo<br>Đơn vị: MB</html>");

        label_StorageInfo.setText("Storage(MB):");
        label_StorageInfo.setToolTipText("<html>Khả năng lưu trữ của máy ảo<br>Đơn vị: MB</html>");

        tf_NameInfo.setEditable(false);
        tf_NameInfo.setToolTipText("Tên của mẫu máy ảo (tên không chứa ký tự đặc biệt)");

        tf_NumPesInfo.setEditable(false);
        tf_NumPesInfo.setText("0");
        tf_NumPesInfo.setToolTipText("Số lượng phần tử xử lý của máy ảo");

        tf_MipsInfo.setEditable(false);
        tf_MipsInfo.setText("0");
        tf_MipsInfo.setToolTipText("<html>Khả năng xử lý của mỗi thành phần xử lý<br>Đơn vị: Mips</html>");

        tf_RamInfo.setEditable(false);
        tf_RamInfo.setText("0");
        tf_RamInfo.setToolTipText("<html>Dung lượng Ram của máy ảo<br>Đơn vị: MB</html>");

        tf_StorageInfo.setEditable(false);
        tf_StorageInfo.setText("0");
        tf_StorageInfo.setToolTipText("<html>Khả năng lưu trữ của máy ảo<br>Đơn vị: MB</html>");

        label_BwInfo.setText("Bandwidth(Kbps):");
        label_Bw.setToolTipText("<html>Băng thông mạng của máy ảo<br>Đơn vị: Mbps</html>");

        tf_BwInfo.setEditable(false);
        tf_BwInfo.setText("0");
        tf_BwInfo.setToolTipText("<html>Băng thông mạng của máy ảo<br>Đơn vị: Mbps</html>");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_NumPesInfo)
                            .addComponent(label_NameInfo))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_NumPesInfo)
                            .addComponent(tf_NameInfo)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_MipsInfo)
                            .addComponent(label_RamInfo)
                            .addComponent(label_StorageInfo)
                            .addComponent(label_BwInfo))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_BwInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(tf_RamInfo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tf_StorageInfo)
                            .addComponent(tf_MipsInfo))))
                .addGap(10, 10, 10))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_NameInfo)
                    .addComponent(tf_NameInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_NumPesInfo)
                    .addComponent(tf_NumPesInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_MipsInfo)
                    .addComponent(tf_MipsInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_RamInfo)
                    .addComponent(tf_RamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_StorageInfo)
                    .addComponent(tf_StorageInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_BwInfo)
                    .addComponent(tf_BwInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        label_Vmm.setText("VM Monitor:");
        label_Vmm.setToolTipText("Tên của Virtual Machine Monitor");

        tf_Vmm.setText("Xen");
        tf_Vmm.setToolTipText("Công cụ giám sát máy ảo (tên VMM không chứa ký tự đặc biệt)");
        tf_Vmm.addKeyListener(new KeyEvent(tf_Vmm, "CHAR", 25));
        tf_Vmm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_VmmFocusLost(evt);
            }
        });

        label_CloudletPolicy.setText("Cloudlet Schedular Policy:");
        label_CloudletPolicy.setToolTipText("Chính sách lập lịch Cloudlet của máy ảo");

        cb_CloudletPolicy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DynamicWorkload", "Space-Shared" }));
        cb_CloudletPolicy.setToolTipText("Chính sách lập lịch Cloudlet của máy ảo");

        label_NumVm.setText("Số lượng:");
        label_NumVm.setToolTipText("Số lượng máy ảo muốn tạo");

        tf_NumVm.setText("25");
        tf_NumVm.setToolTipText("Số lượng máy ảo muốn tạo");
        tf_NumVm.addKeyListener(new KeyEvent(tf_NumVm, "NUMERIC", 7));
        tf_NumVm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_NumVmFocusLost(evt);
            }
        });

        bt_Ok.setBackground(new java.awt.Color(153, 204, 240));
        bt_Ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/oksmall.png"))); // NOI18N
        bt_Ok.setText("Thêm");
        bt_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_OkActionPerformed(evt);
            }
        });

        bt_Cancel.setBackground(new java.awt.Color(153, 204, 240));
        bt_Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cancelsmall.png"))); // NOI18N
        bt_Cancel.setText("Hủy");
        bt_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_CancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_VmGuiLayout = new javax.swing.GroupLayout(panel_VmGui);
        panel_VmGui.setLayout(panel_VmGuiLayout);
        panel_VmGuiLayout.setHorizontalGroup(
            panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_VmGuiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_VmGuiLayout.createSequentialGroup()
                        .addGroup(panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .addComponent(cb_CloudletPolicy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panel_VmGuiLayout.createSequentialGroup()
                                .addComponent(label_CloudletPolicy)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_VmGuiLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bt_Ok, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bt_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(panel_VmGuiLayout.createSequentialGroup()
                        .addComponent(label_Vmm)
                        .addGap(18, 18, 18)
                        .addComponent(tf_Vmm, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_VmGuiLayout.createSequentialGroup()
                        .addComponent(label_NumVm)
                        .addGap(29, 29, 29)
                        .addComponent(tf_NumVm, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                        .addGap(193, 193, 193))))
        );
        panel_VmGuiLayout.setVerticalGroup(
            panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_VmGuiLayout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_CloudletPolicy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_CloudletPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Vmm)
                    .addComponent(tf_Vmm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_NumVm)
                    .addComponent(tf_NumVm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(panel_VmGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_Cancel)
                    .addComponent(bt_Ok))
                .addGap(31, 31, 31))
        );

        bt_EditVmType.setBackground(new java.awt.Color(51, 153, 255));
        bt_EditVmType.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        bt_EditVmType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/clouddelsmall.png"))); // NOI18N
        bt_EditVmType.setText("Sửa mẫu Vm");
        bt_EditVmType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_EditVmTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_SelectVmType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_AddVmType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(bt_EditVmType, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_DelVmType, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(panel_VmGui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_VmGui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(panel_SelectVmType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_DelVmType)
                            .addComponent(bt_EditVmType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panel_AddVmType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        done = false;
    }//GEN-LAST:event_formWindowClosed

    private void bt_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_OkActionPerformed
        if(!done){
            JOptionPane.showMessageDialog(null,"Dữ liệu đầu vào chưa chính xác");
        }else{
            String numberVm, vmm, cloudletPolicy, vmType;
            numberVm = tf_NumVm.getText();
            if(!numberVm.equals("1")){
                numberVm = "-" + numberVm;
            }  
            vmType = tf_NameInfo.getText();
            vmm = tf_Vmm.getText();
            cloudletPolicy = cb_CloudletPolicy.getSelectedItem().toString();
            db_Vm dbvm = new db_Vm(rootID, numberVm, vmType, vmm, cloudletPolicy);
            try{
            switch(option){
                case ADD:{
                    int lastVmID = Integer.parseInt(db_Vm.getLastVmID(stm, rootID));
                    dbvm.Insert(stm);
                    if(lastVmID==0){
                        db_Vm.updateVmID(stm, rootID);
                    }else
                        db_Vm.updateLastVmID(stm, rootID, lastVmID, numberVm);
                }
                    break;
                case EDIT:{
                    dbvm.updateVm(stm, ID);
                    db_Vm.updateVmID(stm, rootID);
                }
                    break;
                default: dispose();
            }
            }catch(Exception e){
                System.out.println(e);
                done = false;
            }
            dispose();
        }
    }//GEN-LAST:event_bt_OkActionPerformed

    private void bt_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_CancelActionPerformed
        done = false;
        dispose();
    }//GEN-LAST:event_bt_CancelActionPerformed

    private void bt_DelVmTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_DelVmTypeActionPerformed
        if(vmTypeList.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null,"Chưa chọn Vm Type");
        }else{
            int temp = JOptionPane.showConfirmDialog(this, "Bạn có chắn chắn muốn xóa?", "Xác nhận", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(temp == 0){
                String name = vmTypeList.getSelectedValue().toString();
                if(name.equals("Demo")) JOptionPane.showMessageDialog(null,"Mẫu host mặc định không thể xóa");
                else{
                    db_VmType.Open();
                    db_VmType.Del(name);
                    db_VmType.Close();
                    updateTypeList(vmTypeList);
                }
            }
        }
    }//GEN-LAST:event_bt_DelVmTypeActionPerformed

    private void bt_AddVmTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_AddVmTypeActionPerformed
        if(!done){
            JOptionPane.showMessageDialog(null,"Dữ liệu đầu vào chưa chính xác");
        }else{
            String name = tf_Name.getText();
            int numPes = Integer.parseInt(tf_NumPes.getText()), ram = Integer.parseInt(tf_Ram.getText());
            double mips = Double.parseDouble(tf_Mips.getText());
            long storage = Long.parseLong(tf_Storage.getText()), bw = Long.parseLong(tf_Bw.getText());
            
            db_VmType vmType = new db_VmType(name, numPes, mips, ram, storage, bw);
            db_VmType.Open();
            vmType.Insert();
            db_VmType.Close();
            updateTypeList(vmTypeList);
            vmTypeList.setSelectedValue(name, true);
            emptyName();
        }
    }//GEN-LAST:event_bt_AddVmTypeActionPerformed

    private void vmTypeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_vmTypeListValueChanged
        String name = (String)vmTypeList.getSelectedValue();
        updateVmTypeInfo(name);
    }//GEN-LAST:event_vmTypeListValueChanged

    private void bt_EditVmTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_EditVmTypeActionPerformed
        if(vmTypeList.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null,"Chưa chọn Vm Type");
        }else{
            bt_DelVmType.setEnabled(false);
            bt_EditVmType.setEnabled(false);
            bt_AddVmType.setVisible(false);
            bt_Ok1.setVisible(true);
            bt_Cancel1.setVisible(true);
            panel_AddVmType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sửa mẫu Vm", javax.swing.border.TitledBorder.DEFAULT_POSITION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
            
            tf_Name.setText(vmTypeList.getSelectedValue().toString());
            db_VmType.Open();
            vmTypeID = db_VmType.getID(tf_Name.getText());
            String[] data = db_VmType.getTypeInfo(tf_Name.getText());
            db_VmType.Close();
            
            tf_NumPes.setText(data[0]);
            tf_Mips.setText(data[1]);
            tf_Ram.setText(data[2]);
            tf_Storage.setText(data[3]);
            tf_Bw.setText(data[4]);
            
        }
    }//GEN-LAST:event_bt_EditVmTypeActionPerformed

    private void bt_Ok1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Ok1ActionPerformed
        if(!done){
            JOptionPane.showMessageDialog(null,"Dữ liệu đầu vào chưa chính xác");
        }else{
            String name = tf_Name.getText();
            int numPes = Integer.parseInt(tf_NumPes.getText()), ram = Integer.parseInt(tf_Ram.getText());
            double mips = Double.parseDouble(tf_Mips.getText());
            long storage = Long.parseLong(tf_Storage.getText()), bw = Long.parseLong(tf_Bw.getText());
            
            db_VmType vmType = new db_VmType(name, numPes, mips, ram, storage, bw);
            db_VmType.Open();
            vmType.Update(vmTypeID);
            db_VmType.Close();
            updateVmTypeInfo(name);
            
            isEditType = true;
            
            vmTypeID = -1;        
            bt_DelVmType.setEnabled(true);
            bt_EditVmType.setEnabled(true);
            bt_AddVmType.setVisible(true);
            bt_Ok1.setVisible(false);
            bt_Cancel1.setVisible(false);
            emptyName();
            panel_AddVmType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thêm mẫu Vm mới", javax.swing.border.TitledBorder.DEFAULT_POSITION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        }
    }//GEN-LAST:event_bt_Ok1ActionPerformed

    private void bt_Cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_Cancel1ActionPerformed
        bt_DelVmType.setEnabled(true);
        bt_EditVmType.setEnabled(true);
        bt_AddVmType.setVisible(true);
        bt_Ok1.setVisible(false);
        bt_Cancel1.setVisible(false);
        panel_AddVmType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thêm mẫu Vm mới", javax.swing.border.TitledBorder.DEFAULT_POSITION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
        
    }//GEN-LAST:event_bt_Cancel1ActionPerformed

    private void tf_NumVmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_NumVmFocusLost
        switch(Check.checkZero(tf_NumVm.getText())){
            case 0: error.clear(tf_NumVm);  done = true;
                    break;
            case 1: error.setError(tf_NumVm, "Chưa nhập số lượng máy ảo"); done = false;
                    break;
            default: error.setError(tf_NumVm, "Số lượng máy ảo phải lớn hơn 0"); done = false;
        }
    }//GEN-LAST:event_tf_NumVmFocusLost

    private void tf_VmmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_VmmFocusLost
        switch(Check.checkEmpty(tf_Vmm.getText())){
            case 0: error.clear(tf_Vmm);  done = true;
                    break;
            default: error.setError(tf_Vmm, "Chưa nhập tên Virtual Machine Monitor"); done = false;
        }
    }//GEN-LAST:event_tf_VmmFocusLost

    private void tf_NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_NameFocusLost
        switch(Check.checkVmTypeName(tf_Name.getText(), vmTypeID)){
            case 0: error.clear(tf_Name);  done = true;
                    break;
            case 1: error.setError(tf_Name, "Chưa nhập tên mẫu máy ảo"); done = false;
                    break;
            default: error.setError(tf_Name, "Tên mẫu máy ảo bị trùng hoặc chưa hợp lệ"); done = false;
        }
    }//GEN-LAST:event_tf_NameFocusLost

    private void tf_NumPesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_NumPesFocusLost
        switch(Check.checkZero(tf_NumPes.getText())){
            case 0: error.clear(tf_NumPes);  done = true;
                    break;
            case 1: error.setError(tf_NumPes, "Chưa nhập số phần tử xử lý của máy ảo"); done = false;
                    break;
            default: error.setError(tf_NumPes, "Số lượng phần tử xử lý phải lớn hơn 0"); done = false;
        }
    }//GEN-LAST:event_tf_NumPesFocusLost

    private void tf_MipsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_MipsFocusLost
        switch(Check.checkMipsValue(tf_Mips.getText())){
            case 0: error.clear(tf_Mips);  done = true;
                    break;
            case 1: error.setError(tf_Mips, "Chưa nhập khả năng xử của mỗi thành phần xử lý"); done = false;
                    break;
            default: error.setError(tf_Mips, "Khả năng xử lý mỗi Pe phải lớn hơn 0.000001"); done = false;
        }
    }//GEN-LAST:event_tf_MipsFocusLost

    private void tf_RamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_RamFocusLost
        switch(Check.checkZero(tf_Ram.getText())){
            case 0: error.clear(tf_Ram);  done = true;
                    break;
            case 1: error.setError(tf_Ram, "Chưa nhập dung lượng Ram của máy ảo"); done = false;
                    break;
            default: error.setError(tf_Ram, "Dung lượng Ram phải lớn hơn 0"); done = false;
        }
    }//GEN-LAST:event_tf_RamFocusLost

    private void tf_StorageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_StorageFocusLost
        switch(Check.checkZero(tf_Storage.getText())){
            case 0: error.clear(tf_Storage);  done = true;
                    break;
            case 1: error.setError(tf_Storage, "Chưa nhập khả năng lưu trữ của máy ảo"); done = false;
                    break;
            default: error.setError(tf_Storage, "Khả năng lưu trữ phải lớn hơn 0"); done = false;
        }
    }//GEN-LAST:event_tf_StorageFocusLost

    private void tf_BwFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_BwFocusLost
        switch(Check.checkZero(tf_Bw.getText())){
            case 0: error.clear(tf_Bw);  done = true;
                    break;
            case 1: error.setError(tf_Bw, "Chưa nhập băng thông của máy ảo"); done = false;
                    break;
            default: error.setError(tf_Bw, "Băng thông máy ảo phải lớn hơn 0"); done = false;
        }
    }//GEN-LAST:event_tf_BwFocusLost

        
    public static void updateTypeList(JList list){
        db_VmType.Open();
        ArrayList name = db_VmType.getAllVmType();
        db_VmType.Close();
        DefaultListModel listModel = new DefaultListModel();
        listModel.clear();
        if(name != null){
            for(int i=0; i<name.size(); i++){
                listModel.addElement(name.get(i));
            }
        }
        list.setModel(listModel);
    }
    
    public void updateVmTypeInfo(String name){
        db_VmType.Open();
        String[] data = db_VmType.getTypeInfo(name);
        db_VmType.Close();
        tf_NameInfo.setText(name);
        tf_NumPesInfo.setText(data[0]);
        tf_MipsInfo.setText(data[1]);
        tf_RamInfo.setText(data[2]);
        tf_StorageInfo.setText(data[3]);
        tf_BwInfo.setText(data[4]);
    }
    
    protected void emptyName(){
        tf_Name.setText("");
        error.setError(tf_Name, "Chưa nhập tên mẫu VM"); 
        doneType = false;
    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(VmGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(VmGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(VmGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(VmGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                VmGui dialog = new VmGui(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_AddVmType;
    private javax.swing.JButton bt_Cancel;
    private javax.swing.JButton bt_Cancel1;
    private javax.swing.JButton bt_DelVmType;
    private javax.swing.JButton bt_EditVmType;
    private javax.swing.JButton bt_Ok;
    private javax.swing.JButton bt_Ok1;
    private javax.swing.JComboBox cb_CloudletPolicy;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_Bw;
    private javax.swing.JLabel label_BwInfo;
    private javax.swing.JLabel label_CloudletPolicy;
    private javax.swing.JLabel label_Mips;
    private javax.swing.JLabel label_MipsInfo;
    private javax.swing.JLabel label_Name;
    private javax.swing.JLabel label_NameInfo;
    private javax.swing.JLabel label_NumPes;
    private javax.swing.JLabel label_NumPesInfo;
    private javax.swing.JLabel label_NumVm;
    private javax.swing.JLabel label_Ram;
    private javax.swing.JLabel label_RamInfo;
    private javax.swing.JLabel label_Storage;
    private javax.swing.JLabel label_StorageInfo;
    private javax.swing.JLabel label_Vmm;
    private javax.swing.JPanel panel_AddVmType;
    private javax.swing.JPanel panel_SelectVmType;
    private javax.swing.JPanel panel_VmGui;
    private javax.swing.JTextField tf_Bw;
    private javax.swing.JTextField tf_BwInfo;
    private javax.swing.JTextField tf_Mips;
    private javax.swing.JTextField tf_MipsInfo;
    private javax.swing.JTextField tf_Name;
    private javax.swing.JTextField tf_NameInfo;
    private javax.swing.JTextField tf_NumPes;
    private javax.swing.JTextField tf_NumPesInfo;
    private javax.swing.JTextField tf_NumVm;
    private javax.swing.JTextField tf_Ram;
    private javax.swing.JTextField tf_RamInfo;
    private javax.swing.JTextField tf_Storage;
    private javax.swing.JTextField tf_StorageInfo;
    private javax.swing.JTextField tf_Vmm;
    private javax.swing.JList vmTypeList;
    // End of variables declaration//GEN-END:variables
}
