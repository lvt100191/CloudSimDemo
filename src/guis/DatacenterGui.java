/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package guis;

import Database.db_Datacenter;
import Support.Check;
import Support.KeyEvent;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JErrorProvider;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author GC
 */
public class DatacenterGui extends javax.swing.JDialog {
    public boolean done = true;
    public final static String[] title = {"Thêm Datacenter", "Sửa Datacenter"};
    public final static String[] text = {"Thêm", "Sửa"};
    public final static int ADD = 0;
    public final static int EDIT = 1;
    public static Statement stm;
    
    private int option;
    private static int ID;
    JErrorProvider error = new JErrorProvider();
    /**
     * Creates new form DatacenterGui
     */
    public DatacenterGui(java.awt.Frame parent, boolean modal, Statement stm) {
        super(parent, modal);
        option = ADD;
        this.stm = stm;
        this.ID = -1;
        try {          
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            initComponents();
            this.setLocationRelativeTo(parent);
            this.setTitle(title[option]);
            panel_DatacenterGui.setBorder(javax.swing.BorderFactory.createTitledBorder(null, title[option], javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
            bt_Ok.setText(text[option]);         
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            Logger.getLogger(DatacenterGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(DatacenterGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(DatacenterGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public DatacenterGui(java.awt.Frame parent, boolean modal, Statement stm, String[] data) {
        super(parent, modal);
        option = EDIT;
        this.stm = stm;
        ID = Integer.parseInt(data[0]);
        try {          
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            initComponents();
            this.setLocationRelativeTo(parent);
            this.setTitle(title[option]);
            panel_DatacenterGui.setBorder(javax.swing.BorderFactory.createTitledBorder(null, title[option], javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12)));
            bt_Ok.setText(text[option]); 
            
            tf_Name.setText(data[1]);
            tf_OS.setText(data[2]);
            cb_Arch.setSelectedItem(data[3]);
            tf_Vmm.setText(data[4]);
            double timezone = Double.parseDouble(data[5]);
            if(timezone <0){
                cb_TimeZone.setSelectedIndex(1);
                timezone = -timezone;
            }
            tf_TimeZone.setText(Double.toString(timezone));
            
            String[] costPolicy = db_Datacenter.getCost(stm, ID);
            tf_CostPerSecond.setText(costPolicy[0]);
            tf_CostPerRam.setText(costPolicy[1]);
            tf_CostPerStorage.setText(costPolicy[2]);
            tf_CostPerBw.setText(costPolicy[3]);
            if(data[6].equals("Enable")){
                radio_Enable.setSelected(true);
            }else radio_Disable.setSelected(true);
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            Logger.getLogger(DatacenterGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(DatacenterGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(DatacenterGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btg_migrationOption = new javax.swing.ButtonGroup();
        panel_DatacenterGui = new javax.swing.JPanel();
        panel_DatacenterInfo = new javax.swing.JPanel();
        label_Name = new javax.swing.JLabel();
        label_OS = new javax.swing.JLabel();
        label_Arch = new javax.swing.JLabel();
        label_Vmm = new javax.swing.JLabel();
        label_Timezone = new javax.swing.JLabel();
        tf_TimeZone = new javax.swing.JTextField();
        tf_Vmm = new javax.swing.JTextField();
        tf_Name = new javax.swing.JTextField();
        tf_OS = new javax.swing.JTextField();
        cb_Arch = new javax.swing.JComboBox();
        cb_TimeZone = new javax.swing.JComboBox();
        label_VMMigration = new javax.swing.JLabel();
        radio_Enable = new javax.swing.JRadioButton();
        radio_Disable = new javax.swing.JRadioButton();
        bt_Ok = new javax.swing.JButton();
        bt_Cancel = new javax.swing.JButton();
        panel_Cost = new javax.swing.JPanel();
        label_CostPerSecond = new javax.swing.JLabel();
        label_CostPerRam = new javax.swing.JLabel();
        label_CostPerStorage = new javax.swing.JLabel();
        label_CostPerBw = new javax.swing.JLabel();
        tf_CostPerBw = new javax.swing.JTextField();
        tf_CostPerStorage = new javax.swing.JTextField();
        tf_CostPerRam = new javax.swing.JTextField();
        tf_CostPerSecond = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Datacenter Characteristics");
        setBackground(new java.awt.Color(0, 153, 204));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        panel_DatacenterGui.setBackground(new java.awt.Color(51, 153, 255));
        panel_DatacenterGui.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Đặc tính Datacenter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        panel_DatacenterInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin Datacenter", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        label_Name.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_Name.setText("Name:");
        label_Name.setToolTipText("Tên của Data center (tên không chứa ký tự đặc biệt)");

        label_OS.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_OS.setText("Operating System:");
        label_OS.setToolTipText("Hệ điều hành (tên HĐH không chứa ký tự đặc biệt)");

        label_Arch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_Arch.setText("Architecture:");
        label_Arch.setToolTipText("Kiến trúc của Data center");

        label_Vmm.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_Vmm.setText("VM Monitor:");
        label_Vmm.setToolTipText("Công cụ giám sát máy ảo (tên VMM không chứa ký tự đặc biệt)");

        label_Timezone.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_Timezone.setText("Time zone (GMT-12 - GMT+13):");
        label_Timezone.setToolTipText("<html>Múi giờ tại vị trí đặt Data center<br>Giá trị: từ -12 đến 13<br>Mặc định bằng 0 nếu giá trị nhập ngoài miền giá trị</html>");

        tf_TimeZone.setText("0");
        tf_TimeZone.setToolTipText("<html>Múi giờ tại vị trí đặt Data center<br>Giá trị: từ -12 đến 13<br>Mặc định bằng 0 nếu giá trị nhập ngoài miền giá trị</html>");
        tf_TimeZone.addKeyListener(new KeyEvent(tf_TimeZone, "NUMERIC_DOT", 5));
        tf_TimeZone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_TimeZoneFocusLost(evt);
            }
        });

        tf_Vmm.setText("Xen");
        tf_Vmm.setToolTipText("Công cụ giám sát máy ảo (tên VMM không chứa ký tự đặc biệt)");
        tf_Vmm.addKeyListener(new KeyEvent(tf_Vmm, "CHAR", 25));
        tf_Vmm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_VmmFocusLost(evt);
            }
        });

        tf_Name.setText("Datacenter_");
        tf_Name.setToolTipText("Tên của Data center (tên không chứa ký tự đặc biệt)");
        tf_Name.addKeyListener(new KeyEvent(tf_Name, "CHAR", 35));
        tf_Name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_NameFocusLost(evt);
            }
        });

        tf_OS.setText("Linux");
        tf_OS.setToolTipText("Hệ điều hành (tên HĐH không chứa ký tự đặc biệt)");
        tf_OS.addKeyListener(new KeyEvent(tf_OS, "CHAR", 35));
        tf_OS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_OSFocusLost(evt);
            }
        });

        cb_Arch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "x86", "x64" }));
        cb_Arch.setToolTipText("Kiến trúc của Data center");

        cb_TimeZone.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+", "-" }));

        label_VMMigration.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_VMMigration.setText("VM Migration:");
        label_VMMigration.setToolTipText("Cho phép di trú máy ảo?");

        btg_migrationOption.add(radio_Enable);
        radio_Enable.setSelected(true);
        radio_Enable.setText("Enable");

        btg_migrationOption.add(radio_Disable);
        radio_Disable.setText("Disable");

        javax.swing.GroupLayout panel_DatacenterInfoLayout = new javax.swing.GroupLayout(panel_DatacenterInfo);
        panel_DatacenterInfo.setLayout(panel_DatacenterInfoLayout);
        panel_DatacenterInfoLayout.setHorizontalGroup(
            panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DatacenterInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_Timezone)
                    .addComponent(label_OS, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_Name, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_Arch, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_Vmm, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(tf_OS)
                        .addComponent(tf_Name, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addComponent(tf_Vmm)
                        .addComponent(cb_Arch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel_DatacenterInfoLayout.createSequentialGroup()
                        .addComponent(cb_TimeZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_TimeZone, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_DatacenterInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label_VMMigration)
                .addGap(18, 18, 18)
                .addComponent(radio_Enable)
                .addGap(18, 18, 18)
                .addComponent(radio_Disable)
                .addGap(64, 64, 64))
        );
        panel_DatacenterInfoLayout.setVerticalGroup(
            panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DatacenterInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Name)
                    .addComponent(tf_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_OS)
                    .addComponent(tf_OS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Arch)
                    .addComponent(cb_Arch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Vmm)
                    .addComponent(tf_Vmm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_Timezone)
                    .addComponent(tf_TimeZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_TimeZone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_DatacenterInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_VMMigration)
                    .addComponent(radio_Enable)
                    .addComponent(radio_Disable))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bt_Ok.setBackground(new java.awt.Color(51, 153, 255));
        bt_Ok.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/oksmall.png"))); // NOI18N
        bt_Ok.setText("Ok");
        bt_Ok.setPreferredSize(new java.awt.Dimension(89, 29));
        bt_Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_OkActionPerformed(evt);
            }
        });

        bt_Cancel.setBackground(new java.awt.Color(51, 153, 255));
        bt_Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/cancelsmall.png"))); // NOI18N
        bt_Cancel.setText("Cancel");
        bt_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_CancelActionPerformed(evt);
            }
        });

        panel_Cost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi phí sử dụng tài nguyên", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12))); // NOI18N

        label_CostPerSecond.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_CostPerSecond.setText("Cost per Second ($):");
        label_CostPerSecond.setToolTipText("<html>Chi phí mỗi giây sử dụng PE<br>(Đơn vị tiền trên mỗi giây)<br>Giá trị: >=0</html>");

        label_CostPerRam.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_CostPerRam.setText("Cost per Ram ($):");
        label_CostPerRam.setToolTipText("<html>Chi phí sử dụng mỗi đơn vị bộ nhớ Ram<br>Đơn vị: $/MB<br>Giá trị: >=0</html>");

        label_CostPerStorage.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_CostPerStorage.setText("Cost per Storage ($):");
        label_CostPerStorage.setToolTipText("<html>Chi phí sử dụng mỗi đơn vị lưu trữ<br>Đơn vị: $/MB<br>Giá trị: >=0</html>");

        label_CostPerBw.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        label_CostPerBw.setText("Cost per Bandwidth ($):");
        label_CostPerBw.setToolTipText("<html>Chi phí sử dụng mỗi đơn vị băng thông<br>Đơn vị: $/Mbps<br>Giá trị: >=0</html>");

        tf_CostPerBw.setText("0");
        tf_CostPerBw.setToolTipText("<html>Chi phí sử dụng mỗi đơn vị băng thông<br>Đơn vị: $/Mbps<br>Giá trị: >=0</html>");
        tf_CostPerBw.addKeyListener(new KeyEvent(tf_CostPerBw, "NUMERIC_DOT", 10));
        tf_CostPerBw.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_CostPerBwFocusLost(evt);
            }
        });

        tf_CostPerStorage.setText("0.0001");
        tf_CostPerStorage.setToolTipText("<html>Chi phí sử dụng mỗi đơn vị lưu trữ<br>Đơn vị: $/MB<br>Giá trị: >=0</html>");
        tf_CostPerStorage.addKeyListener(new KeyEvent(tf_CostPerStorage, "NUMERIC_DOT", 10));
        tf_CostPerStorage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_CostPerStorageFocusLost(evt);
            }
        });

        tf_CostPerRam.setText("0.05");
        tf_CostPerRam.setToolTipText("<html>Chi phí sử dụng mỗi đơn vị bộ nhớ Ram<br>Đơn vị: $/MB<br>Giá trị: >=0</html>");
        tf_CostPerRam.addKeyListener(new KeyEvent(tf_CostPerRam, "NUMERIC_DOT", 10));
        tf_CostPerRam.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_CostPerRamFocusLost(evt);
            }
        });

        tf_CostPerSecond.setText("3");
        tf_CostPerSecond.setToolTipText("<html>Chi phí mỗi giây sử dụng PE<br>(Đơn vị tiền trên mỗi giây)<br>Giá trị: >=0</html>");
        tf_CostPerSecond.addKeyListener(new KeyEvent(tf_CostPerSecond, "NUMERIC_DOT", 10));
        tf_CostPerSecond.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tf_CostPerSecondFocusLost(evt);
            }
        });

        javax.swing.GroupLayout panel_CostLayout = new javax.swing.GroupLayout(panel_Cost);
        panel_Cost.setLayout(panel_CostLayout);
        panel_CostLayout.setHorizontalGroup(
            panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CostLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_CostPerSecond, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_CostPerRam, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_CostPerStorage, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label_CostPerBw, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tf_CostPerRam)
                    .addComponent(tf_CostPerSecond)
                    .addComponent(tf_CostPerStorage)
                    .addComponent(tf_CostPerBw, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_CostLayout.setVerticalGroup(
            panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_CostLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_CostPerSecond)
                    .addComponent(tf_CostPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_CostPerRam)
                    .addComponent(tf_CostPerRam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_CostPerStorage)
                    .addComponent(tf_CostPerStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_CostLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_CostPerBw)
                    .addComponent(tf_CostPerBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_DatacenterGuiLayout = new javax.swing.GroupLayout(panel_DatacenterGui);
        panel_DatacenterGui.setLayout(panel_DatacenterGuiLayout);
        panel_DatacenterGuiLayout.setHorizontalGroup(
            panel_DatacenterGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DatacenterGuiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_DatacenterGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_DatacenterInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_Cost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_DatacenterGuiLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bt_Ok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(bt_Cancel)
                .addGap(89, 89, 89))
        );
        panel_DatacenterGuiLayout.setVerticalGroup(
            panel_DatacenterGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_DatacenterGuiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_DatacenterInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_Cost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(panel_DatacenterGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_Cancel)
                    .addComponent(bt_Ok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_DatacenterGui, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_DatacenterGui, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_CancelActionPerformed
        done = false;
        this.dispose();
    }//GEN-LAST:event_bt_CancelActionPerformed

    private void bt_OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_OkActionPerformed
        if(!done){
            JOptionPane.showMessageDialog(null,"Dữ liệu đầu vào chưa chính xác");
        }else{
            String name = tf_Name.getText();
            String os = tf_OS.getText();
            String arch = cb_Arch.getSelectedItem().toString();
            String vmm = tf_Vmm.getText();
            double timezone = Double.parseDouble(tf_TimeZone.getText());
            if(cb_TimeZone.getSelectedItem().equals("-")) timezone = -timezone;
            double costPerSecond = Double.parseDouble(tf_CostPerSecond.getText());
            double costPerRam = Double.parseDouble(tf_CostPerRam.getText());
            double costPerStorage = Double.parseDouble(tf_CostPerStorage.getText());
            double costPerBw = Double.parseDouble(tf_CostPerBw.getText());
            String vmMigration;
            if(radio_Enable.isSelected()){
                vmMigration = "Enable";
            }else vmMigration = "Disable";
            
            db_Datacenter dbdc = new db_Datacenter(name, os, arch, vmm, timezone, costPerSecond, costPerRam, costPerStorage, costPerBw, vmMigration);
            try{
            switch(option){
                case ADD:{
                    dbdc.Insert(stm);
                }
                    break;
                case EDIT:{
                    dbdc.updateDatacenter(stm, ID);
                }
                    break;
                default: dispose();
            }
            }catch(Exception e){
                System.out.println(e);
                done = false;
            }
            dispose();
        }
    }//GEN-LAST:event_bt_OkActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        done = false;
    }//GEN-LAST:event_formWindowClosed

    private void tf_NameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_NameFocusLost
        switch(Check.checkDatacenterName(stm, tf_Name.getText(), ID)){
            case 0: error.clear(tf_Name);  done = true;
                    break;
            case 1: error.setError(tf_Name, "Chưa nhập tên Datacenter"); done = false;
                    break;
            default: error.setError(tf_Name, "Tên Datacenter bị trùng hoặc chưa hợp lệ"); done = false;
        }
    }//GEN-LAST:event_tf_NameFocusLost

    private void tf_OSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_OSFocusLost
        switch(Check.checkEmpty(tf_OS.getText())){
            case 0: error.clear(tf_OS);  done = true;
                    break;
            default: error.setError(tf_OS, "Chưa nhập tên Hệ điều hành"); done = false;
        }
    }//GEN-LAST:event_tf_OSFocusLost

    private void tf_VmmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_VmmFocusLost
        switch(Check.checkEmpty(tf_Vmm.getText())){
            case 0: error.clear(tf_Vmm);  done = true;
                    break;
            default: error.setError(tf_Vmm, "Chưa nhập tên công cụ giám sát máy ảo"); done = false;
        }
    }//GEN-LAST:event_tf_VmmFocusLost

    private void tf_TimeZoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_TimeZoneFocusLost
        switch(Check.checkTimezone(tf_TimeZone.getText())){
            case 0: error.clear(tf_TimeZone);  done = true;
                    break;
            case 1: error.setError(tf_TimeZone, "Chưa nhập Time-zone"); done = false;
                    break;
            default: error.setError(tf_TimeZone, "Giá trị Time-zone từ -12 (GMT) đến 13 (GMT)"); done = false;
        }
    }//GEN-LAST:event_tf_TimeZoneFocusLost

    private void tf_CostPerSecondFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_CostPerSecondFocusLost
        switch(Check.checkNegative(tf_CostPerSecond.getText())){
            case 0: error.clear(tf_CostPerSecond);  done = true;
                    break;
            case 1: error.setError(tf_CostPerSecond, "Chưa nhập chi phí mỗi giây sử dụng PE"); done = false;
                    break;
            default: error.setError(tf_CostPerSecond, "Giá trị: >=0"); done = false;
        }
    }//GEN-LAST:event_tf_CostPerSecondFocusLost

    private void tf_CostPerRamFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_CostPerRamFocusLost
        switch(Check.checkNegative(tf_CostPerRam.getText())){
            case 0: error.clear(tf_CostPerRam);  done = true;
                    break;
            case 1: error.setError(tf_CostPerRam, "Chưa nhập chi phí sử dụng mỗi đơn vị bộ nhớ Ram"); done = false;
                    break;
            default: error.setError(tf_CostPerRam, "Giá trị: >=0"); done = false;
        }
    }//GEN-LAST:event_tf_CostPerRamFocusLost

    private void tf_CostPerStorageFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_CostPerStorageFocusLost
        switch(Check.checkNegative(tf_CostPerStorage.getText())){
            case 0: error.clear(tf_CostPerStorage);  done = true;
                    break;
            case 1: error.setError(tf_CostPerStorage, "Chưa nhập chi phí sử dụng mỗi đơn vị lưu trữ"); done = false;
                    break;
            default: error.setError(tf_CostPerStorage, "Giá trị: >=0"); done = false;
        }
    }//GEN-LAST:event_tf_CostPerStorageFocusLost

    private void tf_CostPerBwFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tf_CostPerBwFocusLost
        switch(Check.checkNegative(tf_CostPerBw.getText())){
            case 0: error.clear(tf_CostPerBw);  done = true;
                    break;
            case 1: error.setError(tf_CostPerBw, "Chưa nhập chi phí sử dụng mỗi đơn vị băng thông"); done = false;
                    break;
            default: error.setError(tf_CostPerBw, "Giá trị: >=0"); done = false;
        }
    }//GEN-LAST:event_tf_CostPerBwFocusLost

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DatacenterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DatacenterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DatacenterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DatacenterGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                DatacenterGui dialog = new DatacenterGui(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_Cancel;
    private javax.swing.JButton bt_Ok;
    private javax.swing.ButtonGroup btg_migrationOption;
    private javax.swing.JComboBox cb_Arch;
    private javax.swing.JComboBox cb_TimeZone;
    private javax.swing.JLabel label_Arch;
    private javax.swing.JLabel label_CostPerBw;
    private javax.swing.JLabel label_CostPerRam;
    private javax.swing.JLabel label_CostPerSecond;
    private javax.swing.JLabel label_CostPerStorage;
    private javax.swing.JLabel label_Name;
    private javax.swing.JLabel label_OS;
    private javax.swing.JLabel label_Timezone;
    private javax.swing.JLabel label_VMMigration;
    private javax.swing.JLabel label_Vmm;
    private javax.swing.JPanel panel_Cost;
    private javax.swing.JPanel panel_DatacenterGui;
    private javax.swing.JPanel panel_DatacenterInfo;
    private javax.swing.JRadioButton radio_Disable;
    private javax.swing.JRadioButton radio_Enable;
    private javax.swing.JTextField tf_CostPerBw;
    private javax.swing.JTextField tf_CostPerRam;
    private javax.swing.JTextField tf_CostPerSecond;
    private javax.swing.JTextField tf_CostPerStorage;
    private javax.swing.JTextField tf_Name;
    private javax.swing.JTextField tf_OS;
    private javax.swing.JTextField tf_TimeZone;
    private javax.swing.JTextField tf_Vmm;
    // End of variables declaration//GEN-END:variables
}
